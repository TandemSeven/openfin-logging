"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("./db");
exports.CONFIG_VERSION = 2;
function findAll() {
    return __awaiter(this, void 0, void 0, function* () {
        return db_1.default.table('configs').toArray();
    });
}
exports.findAll = findAll;
function findAllOfCurrentVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        return db_1.default.table('configs')
            .where({ version: exports.CONFIG_VERSION })
            .toArray();
    });
}
exports.findAllOfCurrentVersion = findAllOfCurrentVersion;
function findOneField(tabName, fieldName) {
    return __awaiter(this, void 0, void 0, function* () {
        const configs = db_1.default.table('configs');
        return yield configs.where({
            tabName, fieldName, version: exports.CONFIG_VERSION,
        }).first();
    });
}
exports.findOneField = findOneField;
function findOneFieldVal(tabName, fieldName) {
    return __awaiter(this, void 0, void 0, function* () {
        const oneItem = yield findOneField(tabName, fieldName);
        return oneItem ? oneItem.value : null;
    });
}
exports.findOneFieldVal = findOneFieldVal;
function saveOrUpdateOneByTabNameFieldName(tabName, fieldName, value) {
    return __awaiter(this, void 0, void 0, function* () {
        let one = null;
        const configs = db_1.default.table('configs');
        yield db_1.default.transaction('rw', configs, () => __awaiter(this, void 0, void 0, function* () {
            const founds = yield configs
                .where({ tabName, fieldName, version: exports.CONFIG_VERSION })
                .toArray();
            // console.log('configDao::saveOrUpdateOneByTabNameFieldName',founds.length,founds,tabName,fieldName,value);
            if (founds.length === 0) {
                one = { tabName, fieldName, value, version: exports.CONFIG_VERSION };
                const id = yield configs.put(one);
                one = yield configs.get(id);
            }
            else if (founds.length === 1) {
                one = founds[0];
                yield configs.update(one.id, { value });
                one = yield configs.get(one.id);
            }
            else {
                yield configs.bulkDelete(founds.map(one => one.id));
                one = { tabName, fieldName, value, version: exports.CONFIG_VERSION };
                const id = yield configs.put(one);
                one = yield configs.get(id);
            }
        }));
        return one;
    });
}
exports.saveOrUpdateOneByTabNameFieldName = saveOrUpdateOneByTabNameFieldName;
function removeOneByTabNameAndFieldName(tabName, fieldName) {
    return __awaiter(this, void 0, void 0, function* () {
        const configs = db_1.default.table('configs');
        let result = 0;
        yield db_1.default.transaction('rw', configs, () => __awaiter(this, void 0, void 0, function* () {
            const founds = yield configs
                .where({ tabName, fieldName, version: exports.CONFIG_VERSION })
                .toArray();
            if (founds.length) {
                yield configs.bulkDelete(founds.map(one => one.id));
            }
            result = founds.length;
        }));
        return result;
    });
}
exports.removeOneByTabNameAndFieldName = removeOneByTabNameAndFieldName;
//# sourceMappingURL=configDao.js.map