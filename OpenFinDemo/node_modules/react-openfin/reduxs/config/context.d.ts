import * as React from 'react';
import { Omit } from '../../utils/typeHelper';
import { I18Language, IConfigState } from './types';
export interface IWithConfigActions {
    onToggleThemeField: () => void;
    onUpdateLangField: (lang: I18Language) => void;
    onUpdateGlobalFilterString: (filterStr: string) => void;
    onUpdateOneField: (tabName: string, fieldName: string, value: any) => void;
    onExtendCustomState: (customState: any) => void;
}
export interface IWithConfig {
    config: Partial<IConfigState>;
    actions: IWithConfigActions;
}
interface IWithConfigContext {
    configContext?: Partial<IWithConfig>;
}
export declare const ConfigContext: React.Context<Partial<IWithConfig>>;
export declare type WithConfigContext = IWithConfigContext;
export declare const ConfigContextProvider: React.ProviderExoticComponent<React.ProviderProps<Partial<IWithConfig>>>;
export declare const ConfigContextConsumer: React.ExoticComponent<React.ConsumerProps<Partial<IWithConfig>>>;
export declare const withConfigContext: <P extends WithConfigContext>(Component: React.ComponentType<P>) => React.FunctionComponent<Omit<P, WithConfigContext>>;
export {};
