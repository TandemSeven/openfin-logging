"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redux_actions_1 = require("redux-actions");
const init_1 = require("../../init");
const actions_1 = require("./actions");
const constant_1 = require("./constant");
function buildDefaultConfigState(configTabs) {
    const result = {
        configGlobalFilterString: '',
        _tabs: configTabs,
    };
    configTabs.forEach(oneTab => {
        oneTab._fieldLabels = '';
        result[oneTab._name] = {};
        oneTab._fields.forEach(oneField => {
            oneTab._fieldLabels = oneTab._fieldLabels + oneField._label;
            if (oneField._name && (oneField._defaultValue || oneField._defaultValue === "")) {
                result[oneTab._name][oneField._name] = oneField._defaultValue;
            }
        });
    });
    return result;
}
exports.buildDefaultConfigState = buildDefaultConfigState;
exports.defaultState = buildDefaultConfigState(constant_1.default);
exports.buildInitState = (parentWindowState) => {
    return exports.defaultState;
};
exports.reducerMap = {
    [actions_1.CONFIG_RESET]: (state, action) => {
        const { tabName } = action.payload;
        if (tabName) {
            return Object.assign({}, state, { tabName: exports.defaultState[tabName] });
        }
        else {
            return exports.defaultState;
        }
    },
    [actions_1.CONFIG_DO_UPDATE_ONE_FIELD]: (state, action) => {
        const { tabName, fieldName, value } = action.payload;
        return Object.assign({}, state, { [tabName]: Object.assign({}, state[tabName], { [fieldName]: value }) });
    },
    [actions_1.CONFIG_UPDATE_GLOBAL_FILTER_STR]: (state, action) => {
        const { configGlobalFilterString } = action.payload;
        return Object.assign({}, state, { configGlobalFilterString });
    },
    [actions_1.CONFIG_EXTEND_CUST_STATE]: (state, action) => {
        const custState = action.payload;
        if (custState.application) {
            delete custState.application;
        }
        return Object.assign({}, state, custState);
    },
    [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_ADD_DELTA]: (state, action) => {
        const applicationConfig = state.application;
        return Object.assign({}, state, { application: Object.assign({}, state.application, { newWinTop: applicationConfig.newWinTop + applicationConfig.newWindDeltaHeight, newWinLeft: applicationConfig.newWinLeft + applicationConfig.newWindDeltaLeft }) });
    },
    [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_RESET_TOP]: (state, action) => (Object.assign({}, state, { application: Object.assign({}, state.application, { newWinTop: init_1.default.config.newWindowTop }) })),
    [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_RESET_LEFT]: (state, action) => (Object.assign({}, state, { application: Object.assign({}, state.application, { newWinLeft: init_1.default.config.newWindowLeft }) })),
};
// const reducer = (state:IConfigState, action:Action<any>):IConfigState => {
//
//     if (action.type && reducerMap[action.type]){
//         return reducerMap[action.type](state,action);
//     }else{
//         return state;
//     }
//
// }
exports.reducerCreator = (parentState) => {
    return redux_actions_1.handleActions(exports.reducerMap, exports.buildInitState(parentState));
};
exports.default = exports.reducerCreator;
//# sourceMappingURL=reducer.js.map