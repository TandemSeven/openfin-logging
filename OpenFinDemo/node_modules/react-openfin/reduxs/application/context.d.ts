import * as React from 'react';
import { WindowOptions } from 'redux-openfin';
import { CreateNotificationPayload } from 'redux-openfin/notification/types';
import { Omit } from '../../utils/typeHelper';
import { IApplicationState, IApplicationNewSnackbarOption, IReadyPayload } from './types';
export interface IWithApplicationActions {
    launchNewWin: (appJson: Partial<WindowOptions>) => void;
    onSetLoadingMsg: (label: string) => void;
    onApplicationStart: () => void;
    onApplicationReady: (readyConfig: IReadyPayload) => void;
    onChildWinStart: () => void;
    onChildWinReady: (readyConfig: IReadyPayload) => void;
    onNotificationStart: () => void;
    onNotificationReady: (readyConfig: IReadyPayload) => void;
    onNewSnackBar: (newSnackBar: IApplicationNewSnackbarOption) => void;
    onSnackBarClose: (event: React.SyntheticEvent<any>, reason: string) => void;
    onSnackBarCloseBtnClick: () => void;
    onSnackBarExited: () => void;
    onDrawerToggle: () => void;
    onLaunchBarClose: () => void;
    onLaunchBarToggleCollapse: () => void;
    onLaunchBarToggle: () => void;
    onSetAsForeground: () => void;
    onUndock: () => void;
    onToggleWinState: () => void;
    onMinimize: () => void;
    onWinClose: () => void;
    onWinForceClose: () => void;
    launchNewNotification: (options: CreateNotificationPayload) => void;
    onNotificationClose: () => void;
}
export interface IWithApplication {
    state: IApplicationState;
    actions: IWithApplicationActions;
}
export declare const ApplicationContext: React.Context<Partial<IWithApplication>>;
interface IWithApplicationContext {
    applicationContext?: Partial<IWithApplication>;
}
export declare type WithApplicationContext = IWithApplicationContext;
export declare const ApplicationContextProvider: React.ProviderExoticComponent<React.ProviderProps<Partial<IWithApplication>>>;
export declare const ApplicationContextConsumer: React.ExoticComponent<React.ConsumerProps<Partial<IWithApplication>>>;
export declare const withApplicationContext: <P extends WithApplicationContext>(Component: React.ComponentType<P>) => React.FunctionComponent<Omit<P, WithApplicationContext>>;
export {};
