import { WindowOptions } from 'redux-openfin';
import { APPLICATION_LAUNCH_BAR_STATUS, IReadyPayload, IReadyToClose, IApplicationNewSnackbarOption } from './types';
import * as React from "react";
export declare const APPLICATION_SET_LOADING_MSG: string;
export declare const APPLICATION_START: string;
export declare const APPLICATION_AWAIT: string;
export declare const APPLICATION_READY: string;
export declare const APPLICATION_STARTED: string;
export declare const APPLICATION_CHILD_START: string;
export declare const APPLICATION_CHILD_AWAIT: string;
export declare const APPLICATION_CHILD_READY: string;
export declare const APPLICATION_CHILD_STARTED: string;
export declare const APPLICATION_NOTIFICATION_START: string;
export declare const APPLICATION_NOTIFICATION_AWAIT: string;
export declare const APPLICATION_NOTIFICATION_READY: string;
export declare const APPLICATION_NOTIFICATION_STARTED: string;
export declare const APPLICATION_DRAWER_TOGGLE: string;
export declare const APPLICATION_TOGGLE_WINDOW_STATE: string;
export declare const APPLICATION_CUR_WIN_CLOSING: string;
export declare const APPLICATION_CUR_WIN_READY_TO_CLOSE: string;
export declare const applicationSetLoadingMsg: import("redux-actions").ActionFunction1<string, import("redux-actions").Action<{
    loadingMsg: string;
}>>;
export declare const applicationStart: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationAwait: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationReady: import("redux-actions").ActionFunction1<IReadyPayload, import("redux-actions").Action<IReadyPayload>>;
export declare const applicationStarted: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationChildStart: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationChildAwait: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationChildReady: import("redux-actions").ActionFunction1<IReadyPayload, import("redux-actions").Action<IReadyPayload>>;
export declare const applicationChildStarted: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationNotificationStart: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationNotificationAwait: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationNotificationReady: import("redux-actions").ActionFunction1<IReadyPayload, import("redux-actions").Action<IReadyPayload>>;
export declare const applicationNotificationStarted: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationDrawerToggle: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationToggleWindowState: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationCurWinClosing: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationCurWinReadyToClose: import("redux-actions").ActionFunction1<IReadyToClose, import("redux-actions").Action<IReadyToClose>>;
export declare const APPLICATION_NEW_SNACKBAR: string;
export declare const APPLICATION_SET_SNACKBAR_STATUS: string;
export declare const APPLICATION_PROCESS_SNACKBAR_QUEUE: string;
export declare const APPLICATION_CLOSE_SNACKBAR: string;
export declare const applicationNewSnackbar: import("redux-actions").ActionFunction1<IApplicationNewSnackbarOption, import("redux-actions").Action<IApplicationNewSnackbarOption>>;
export declare const applicationSetSnackbarStatus: import("redux-actions").ActionFunction1<boolean, import("redux-actions").Action<{
    snackBarOpen: boolean;
}>>;
export declare const applicationProcessSnackbarQueue: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationCloseSnackbar: import("redux-actions").ActionFunction2<React.SyntheticEvent<any, Event>, string, import("redux-actions").Action<{
    event: React.SyntheticEvent<any, Event>;
    reason: string;
}>>;
export declare const APPLICATION_UPDATE_DOCK_STATUS: string;
export declare const applicationUpdateDockStatus: import("redux-actions").ActionFunction1<boolean, import("redux-actions").Action<{
    docked: any;
}>>;
export declare const APPLICATION_LAUNCH_BAR_TOGGLE: string;
export declare const APPLICATION_LAUNCH_BAR_TOGGLED: string;
export declare const APPLICATION_LAUNCH_BAR_TOGGLE_COLLAPSE: string;
export declare const APPLICATION_LAUNCH_NEW_WINDOW: string;
export declare const APPLICATION_LAUNCH_BAR_CLOSE: string;
export declare const applicationLaunchBarToggle: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationLaunchBarToggled: import("redux-actions").ActionFunction1<APPLICATION_LAUNCH_BAR_STATUS, import("redux-actions").Action<{
    status: APPLICATION_LAUNCH_BAR_STATUS;
}>>;
export declare const applicationLaunchBarToggleCollapse: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const applicationLaunchNewWindow: import("redux-actions").ActionFunction1<Partial<WindowOptions>, import("redux-actions").Action<Partial<WindowOptions>>>;
export declare const applicationLaunchBarClose: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const APPLICATION_NETWORK_ONLINE: string;
export declare const applicationNetworkOnline: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
export declare const APPLICATION_NETWORK_OFFLINE: string;
export declare const applicationNetworkOffline: import("redux-actions").ActionFunction1<void, import("redux-actions").Action<void>>;
