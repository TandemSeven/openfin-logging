"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const effects_1 = require("redux-saga/effects");
const redux_openfin_1 = require("redux-openfin");
const __1 = require("..");
const configDao_1 = require("../../dexies/configDao");
exports.getOneConfigField = (tabName, fieldName) => state => {
    if (tabName in state.config && fieldName in state.config[tabName]) {
        return state.config[tabName][fieldName];
    }
    else {
        return null;
    }
};
exports.getNewWindowTop = (state) => state.config.application.newWinTop;
exports.getNewWindowLeft = (state) => state.config.application.newWinLeft;
exports.getNewWindowWidth = (state) => state.config.application.newWinWidth;
exports.getNewWindowHeight = (state) => state.config.application.newWinHeight;
function* handleConfigLoadFromDexie() {
    const configs = yield effects_1.call(configDao_1.findAllOfCurrentVersion);
    for (const config of configs) {
        yield effects_1.put(__1.configDoUpdateOneField({
            tabName: config.tabName,
            fieldName: config.fieldName,
            value: config.value,
        }));
    }
}
exports.handleConfigLoadFromDexie = handleConfigLoadFromDexie;
function* handleConfigUpdateOneField(action) {
    const { name, value } = action.payload;
    const paths = name.split('.');
    if (paths.length === 2) {
        yield effects_1.putResolve(__1.configDoUpdateOneField({
            tabName: paths[0],
            fieldName: paths[1],
            value,
        }));
        yield effects_1.put(__1.configDoUpdateOneFieldInDexie({
            tabName: paths[0],
            fieldName: paths[1],
            value,
        }));
    }
}
exports.handleConfigUpdateOneField = handleConfigUpdateOneField;
function* handleConfigSelectOneField(action) {
    const { tabName, fieldName } = action.payload;
    const value = yield effects_1.select(exports.getOneConfigField(tabName, fieldName));
    const result = {
        tabName, fieldName, value,
        userObj: 'userObj' in action.payload ? action.payload.userObj : null,
    };
    yield effects_1.putResolve(__1.configSelectOneFieldRes(result));
}
exports.handleConfigSelectOneField = handleConfigSelectOneField;
function* handleConfigRemoveOneField(action) {
    const { tabName, fieldName } = action.payload;
    yield effects_1.call(configDao_1.removeOneByTabNameAndFieldName, tabName, fieldName);
    if ('value' in action.payload) {
        yield effects_1.putResolve(__1.configDoUpdateOneField({
            tabName,
            fieldName,
            value: action.payload.value,
        }));
    }
    else {
        yield effects_1.putResolve(__1.configDoUpdateOneField({
            tabName,
            fieldName,
            value: {},
        }));
    }
}
exports.handleConfigRemoveOneField = handleConfigRemoveOneField;
function* handleConfigUpdateOneFieldInDexie(action) {
    const { tabName, fieldName, value } = action.payload;
    yield effects_1.call(configDao_1.saveOrUpdateOneByTabNameFieldName, tabName, fieldName, value);
    yield effects_1.delay(800);
}
exports.handleConfigUpdateOneFieldInDexie = handleConfigUpdateOneFieldInDexie;
function* handleConfigUpdateNewWindowPosition() {
    const newWinWidth = yield effects_1.select(exports.getNewWindowWidth);
    const newWinHeight = yield effects_1.select(exports.getNewWindowHeight);
    const newWinTop = yield effects_1.select(exports.getNewWindowTop);
    const newWinLeft = yield effects_1.select(exports.getNewWindowLeft);
    const monitorInfoAction = yield effects_1.call(redux_openfin_1.System.asyncs.getMonitorInfo, redux_openfin_1.System.actions.getMonitorInfo({}));
    const virtualScreen = monitorInfoAction.payload.virtualScreen;
    // console.log("configUpdateNewWindowPosition",monitorInfoAction,virtualScreen);
    if (((newWinLeft + newWinWidth) < virtualScreen.right) &&
        ((newWinTop + newWinHeight) < virtualScreen.bottom)) {
        yield effects_1.putResolve(__1.configUpdateNewWindowPositionAddDelta());
    }
    else {
        if ((newWinLeft + newWinWidth) >= virtualScreen.right) {
            yield effects_1.putResolve(__1.configUpdateNewWindowPositionResetLeft());
        }
        if ((newWinTop + newWinHeight) >= virtualScreen.bottom) {
            yield effects_1.putResolve(__1.configUpdateNewWindowPositionResetTop());
        }
    }
}
exports.handleConfigUpdateNewWindowPosition = handleConfigUpdateNewWindowPosition;
function* default_1() {
    yield effects_1.takeEvery(__1.CONFIG_LOAD_FROM_DEXIE, handleConfigLoadFromDexie);
    yield effects_1.takeEvery(__1.CONFIG_UPDATE_ONE_FIELD, handleConfigUpdateOneField);
    yield effects_1.takeEvery(__1.CONFIG_SELECT_ONE_FIELD, handleConfigSelectOneField);
    yield effects_1.takeEvery(__1.CONFIG_REMOVE_ONE_FIELD, handleConfigRemoveOneField);
    yield effects_1.takeLatest(__1.CONFIG_DO_UPDATE_ONE_FIELD_IN_DEXIE, handleConfigUpdateOneFieldInDexie);
    yield effects_1.takeLatest(__1.CONFIG_UPDATE_NEW_WINDOW_POSITION, handleConfigUpdateNewWindowPosition);
}
exports.default = default_1;
//# sourceMappingURL=config.js.map