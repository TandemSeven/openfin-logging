"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const effects_1 = require("redux-saga/effects");
const redux_openfin_1 = require("redux-openfin");
const generalUtils_1 = require("../../utils/generalUtils");
const configDao_1 = require("../../dexies/configDao");
const __1 = require("..");
const init_1 = require("../../init");
exports.LOADING_VIEW_UUID = `${init_1.default.finUuid}-loading-view`;
let loadingWindow = null;
exports.LAUNCHBAR_VIEW_UUID = `${init_1.default.finUuid}-launchbar-view`;
let launchbarWindow = null;
const ENABLE_LOADING_VIEW = init_1.default.config.enableLoadingView;
const LOADING_BANNER_WIDTH = init_1.default.config.defaultLoadingBannerWidth;
const LOADING_BANNER_HEIGHT = init_1.default.config.defaultLoadingBannerHeight;
const DEFAULT_WIDTH = init_1.default.config.defaultAppWidth;
const DEFAULT_HEIGHT = init_1.default.config.defaultAppHeight;
exports.getSnackBarOpen = (state) => state.application.snackBarOpen;
exports.getLaunchBarCollapse = (state) => state.application.launchBarCollapse;
exports.getWindowsState = (state) => state.application.windowsState;
exports.getNewWindowTop = (state) => state.config.application.newWinTop;
exports.getNewWindowLeft = (state) => state.config.application.newWinLeft;
exports.getNewWindowWidth = (state) => state.config.application.newWinWidth;
exports.getNewWindowHeight = (state) => state.config.application.newWinHeight;
function* handleShowLoadingView(monitorRect) {
    const WINDOW_WIDTH = monitorRect.right - monitorRect.left;
    const WINDOW_HEIGHT = monitorRect.bottom - monitorRect.top;
    const _LOADING_BANNER_WIDTH = Math.min(LOADING_BANNER_WIDTH, WINDOW_WIDTH * 0.6387);
    const _LOADING_BANNER_HEIGHT = Math.min(LOADING_BANNER_HEIGHT, WINDOW_HEIGHT * 0.324074);
    const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow({
        name: exports.LOADING_VIEW_UUID,
        url: init_1.default.config.publicUrl + '/loading',
        frame: false,
        resizable: false,
        state: 'normal',
        autoShow: true,
        defaultCentered: true,
        defaultLeft: (monitorRect.right - monitorRect.left) / 2 - _LOADING_BANNER_WIDTH / 2,
        defaultTop: (monitorRect.bottom - monitorRect.top) / 2 - _LOADING_BANNER_HEIGHT / 2,
        defaultWidth: _LOADING_BANNER_WIDTH,
        defaultHeight: _LOADING_BANNER_HEIGHT,
    }));
    loadingWindow = newWindowResAction.payload.window;
    loadingWindow.setBounds({
        left: (monitorRect.right - monitorRect.left) / 2 - _LOADING_BANNER_WIDTH / 2,
        top: (monitorRect.bottom - monitorRect.top) / 2 - _LOADING_BANNER_HEIGHT / 2,
        width: _LOADING_BANNER_WIDTH,
        height: _LOADING_BANNER_HEIGHT
    });
    loadingWindow.bringToFront();
}
exports.handleShowLoadingView = handleShowLoadingView;
function* handleHideFromLoadingView(monitorRect, targetUrl) {
    // after the sagas loaded, redirect to default page/view
    if (targetUrl && targetUrl.length > 0) {
        init_1.default.hist.push(init_1.default.config.publicUrl + targetUrl);
    }
    else if (init_1.default.config.defaultViewUrl && init_1.default.config.defaultViewUrl.length > 0) {
        init_1.default.hist.push(init_1.default.config.publicUrl + init_1.default.config.defaultViewUrl);
    }
    else {
        init_1.default.hist.push(init_1.default.config.publicUrl + '/dashboard/view-one');
    }
    yield effects_1.delay(200);
    if (loadingWindow) {
        loadingWindow.close(true);
    }
    yield effects_1.put(redux_openfin_1.Window.actions.show({ force: true }));
}
exports.handleHideFromLoadingView = handleHideFromLoadingView;
function* handleApplicationLoading() {
    const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');
    if (dbSavedLang) {
        init_1.default.i18n.changeLanguage(dbSavedLang);
    }
    const currentIsLoadingView = (new URL(window.location.href).pathname.indexOf('loading') > -1) ||
        (new URL(window.location.href).pathname.indexOf('index.html') > -1);
    const monitorInfoAction = yield effects_1.call(redux_openfin_1.System.asyncs.getMonitorInfo, redux_openfin_1.System.actions.getMonitorInfo({}));
    const monitorRect = monitorInfoAction.payload.primaryMonitor.monitorRect;
    if (ENABLE_LOADING_VIEW && currentIsLoadingView) {
        yield* handleShowLoadingView(monitorRect);
    }
    yield effects_1.putResolve(__1.applicationSetLoadingMsg('init'));
    yield effects_1.all([
        effects_1.putResolve(__1.configLoadFromDexie()),
        effects_1.call(redux_openfin_1.System.asyncs.getMachineId, redux_openfin_1.System.actions.getMachineId({})),
        // getDeviceUserId might fail, thus use flux syntax........
        effects_1.putResolve(redux_openfin_1.System.actions.getDeviceUserId({})),
        effects_1.take(redux_openfin_1.System.actions.GET_DEVICE_USER_ID_RES),
        effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({ env: 'USERNAME' })),
        effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({ env: 'computername' })),
        effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({ env: 'HOSTNAME' })),
        effects_1.call(redux_openfin_1.System.asyncs.getVersion, redux_openfin_1.System.actions.getVersion({})),
        effects_1.call(redux_openfin_1.System.asyncs.getHostSpecs, redux_openfin_1.System.actions.getHostSpecs({})),
        effects_1.call(redux_openfin_1.Window.asyncs.getState, redux_openfin_1.Window.actions.getState({})),
    ]);
    yield effects_1.putResolve(__1.applicationAwait());
    const { readyRes, timeout } = yield effects_1.race({
        readyRes: effects_1.take(__1.APPLICATION_READY),
        timeout: effects_1.delay(init_1.default.config.onAppAwaitDelayTime),
    });
    // console.log("[react-openfin]::app saga take APPLICATION_READY or time out", readyRes, timeout);
    const readyPayload = readyRes ? readyRes.payload : {};
    yield effects_1.putResolve(__1.applicationSetLoadingMsg('ready'));
    yield effects_1.putResolve(__1.applicationStarted());
    if (ENABLE_LOADING_VIEW && currentIsLoadingView) {
        yield* handleHideFromLoadingView(monitorRect, (readyPayload && readyPayload.targetUrl) ? readyPayload.targetUrl : void 0);
    }
    yield effects_1.put(__1.applicationSetLoadingMsg(''));
    yield effects_1.call(redux_openfin_1.Window.asyncs.bringToFront, redux_openfin_1.Window.actions.bringToFront({}));
}
exports.handleApplicationLoading = handleApplicationLoading;
function* handleApplicationChildLoading() {
    const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');
    if (dbSavedLang) {
        init_1.default.i18n.changeLanguage(dbSavedLang);
    }
    yield effects_1.all([
        effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({})),
        effects_1.putResolve(__1.configLoadFromDexie()),
    ]);
    const groupedWindowsRes = yield effects_1.call(redux_openfin_1.Window.asyncs.getGroup, redux_openfin_1.Window.actions.getGroup({}));
    const groupedWindows = groupedWindowsRes.payload.windows;
    if (groupedWindows && groupedWindows.length > 0) {
        yield effects_1.put(__1.applicationUpdateDockStatus(true));
    }
    else {
        yield effects_1.put(__1.applicationUpdateDockStatus(false));
    }
    yield effects_1.putResolve(__1.applicationChildAwait());
    const { readyRes, timeout } = yield effects_1.race({
        readyRes: effects_1.take(__1.APPLICATION_CHILD_READY),
        timeout: effects_1.delay(init_1.default.config.onAppChildAwaitDelayTime),
    });
    // console.log("[react-openfin]::app saga take APPLICATION_CHILD_READY or time out", readyRes, timeout);
    const readyPayload = readyRes ? readyRes.payload : {};
    if (readyPayload && readyPayload.targetUrl) {
        init_1.default.hist.push(init_1.default.config.publicUrl + readyPayload.targetUrl);
    }
    yield effects_1.putResolve(__1.applicationChildStarted());
}
exports.handleApplicationChildLoading = handleApplicationChildLoading;
function* handleApplicationNotificationLoading() {
    const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');
    if (dbSavedLang) {
        init_1.default.i18n.changeLanguage(dbSavedLang);
    }
    yield effects_1.all([
        effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({})),
        effects_1.putResolve(__1.configLoadFromDexie()),
    ]);
    yield effects_1.putResolve(__1.applicationNotificationAwait());
    const { readyRes, timeout } = yield effects_1.race({
        readyRes: effects_1.take(__1.APPLICATION_NOTIFICATION_READY),
        timeout: effects_1.delay(init_1.default.config.onAppNotificationAwaitDelayTime),
    });
    // console.log("[react-openfin]::app saga take APPLICATION_NOTIFICATION_READY or time out", readyRes, timeout);
    const readyPayload = readyRes ? readyRes.payload : {};
    if (readyPayload && readyPayload.targetUrl) {
        init_1.default.hist.push(init_1.default.config.publicUrl + readyPayload.targetUrl);
    }
    yield effects_1.putResolve(__1.applicationNotificationStarted());
}
exports.handleApplicationNotificationLoading = handleApplicationNotificationLoading;
function* handleApplicationExit() {
    yield effects_1.putResolve(__1.applicationCurWinClosing());
    const { readyToClose, timeout } = yield effects_1.race({
        readyToClose: effects_1.take(__1.APPLICATION_CUR_WIN_READY_TO_CLOSE),
        timeout: effects_1.delay(init_1.default.config.onAppClosingAwaitDelayTime),
    });
    // console.log("[react-openfin]::app saga take APPLICATION_CUR_WIN_READY_TO_CLOSE or time out", readyToClose, timeout);
    let forceToClose = true;
    if (readyToClose) {
        console.log("[react-openfin]::app saga client response and ready to close");
        const payload = readyToClose.payload;
        if (payload.skipClosing) {
            console.log("[react-openfin]::app saga client response to skip closing");
            forceToClose = false;
        }
    }
    if (forceToClose) {
        yield effects_1.putResolve(redux_openfin_1.Window.actions.close({ force: true }));
    }
}
exports.handleApplicationExit = handleApplicationExit;
function* handleApplicationAddNewSnackBar() {
    const snackBarOpen = yield effects_1.select(exports.getSnackBarOpen);
    if (snackBarOpen) {
        yield effects_1.put(__1.applicationSetSnackbarStatus(false));
    }
    else {
        yield effects_1.put(__1.applicationProcessSnackbarQueue());
    }
}
exports.handleApplicationAddNewSnackBar = handleApplicationAddNewSnackBar;
function* handleApplicationCloseSnackBar(action) {
    const { event, reason } = action.payload;
    if (reason !== 'clickaway') {
        return;
    }
    else {
        yield effects_1.put(__1.applicationSetSnackbarStatus(false));
    }
}
exports.handleApplicationCloseSnackBar = handleApplicationCloseSnackBar;
function* handleToggleWindowState() {
    const windowState = yield effects_1.select(exports.getWindowsState);
    if (windowState === 'maximized') {
        yield effects_1.call(redux_openfin_1.Window.asyncs.restore, redux_openfin_1.Window.actions.restore({}));
    }
    else if (windowState === 'normal') {
        yield effects_1.call(redux_openfin_1.Window.asyncs.maximize, redux_openfin_1.Window.actions.maximize({}));
    }
}
exports.handleToggleWindowState = handleToggleWindowState;
function* handleApplicationLaunchBarToggle() {
    const launchBarCollapse = yield effects_1.select(exports.getLaunchBarCollapse);
    const getBoundsAction = yield effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({}));
    const getBoundsActionPayload = getBoundsAction.payload;
    const mainWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({
        appUuid: init_1.default.finUuid,
        windowName: init_1.default.finUuid,
    }));
    const mainWindow = mainWindowAction.payload.window;
    const launchbarWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({
        appUuid: init_1.default.finUuid,
        windowName: exports.LAUNCHBAR_VIEW_UUID,
    }));
    console.log('[react-openfin] application.ts#310', mainWindowAction, launchbarWindowAction);
    if (window.name === exports.LAUNCHBAR_VIEW_UUID) {
        launchbarWindow = launchbarWindowAction.payload.window;
        mainWindow.show(true);
        yield effects_1.put(__1.applicationLaunchBarToggled(__1.APPLICATION_LAUNCH_BAR_STATUS.SWITCH_TO_MAIN_WIN));
        launchbarWindow.close();
    }
    else {
        launchbarWindow = null;
        const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow({
            name: exports.LAUNCHBAR_VIEW_UUID,
            url: init_1.default.config.publicUrl + '/launchBar',
            frame: false,
            resizable: false,
            state: 'normal',
            autoShow: true,
            defaultLeft: getBoundsActionPayload.left,
            defaultTop: getBoundsActionPayload.top,
            defaultWidth: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,
            defaultHeight: 64,
            minWidth: 88,
            minHeight: 64,
        }));
        launchbarWindow = newWindowResAction.payload.window;
        if (launchBarCollapse) {
            launchbarWindow.setBounds({
                left: getBoundsActionPayload.left,
                top: getBoundsActionPayload.top,
                width: 88,
                height: 64,
            });
        }
        else {
            launchbarWindow.setBounds({
                left: getBoundsActionPayload.left,
                top: getBoundsActionPayload.top,
                width: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,
                height: 64,
            });
        }
        launchbarWindow.bringToFront();
        mainWindow.hide();
        yield effects_1.put(__1.applicationLaunchBarToggled(__1.APPLICATION_LAUNCH_BAR_STATUS.SWITCH_TO_LAUNCHBAR));
    }
}
exports.handleApplicationLaunchBarToggle = handleApplicationLaunchBarToggle;
function* handleApplicationLaunchBarToggleCollapse() {
    const launchBarCollapse = yield effects_1.select(exports.getLaunchBarCollapse);
    const getBoundsAction = yield effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({}));
    const getBoundsActionPayload = getBoundsAction.payload;
    if (launchBarCollapse) {
        yield effects_1.call(redux_openfin_1.Window.asyncs.setBounds, redux_openfin_1.Window.actions.setBounds({
            left: getBoundsActionPayload.left,
            top: getBoundsActionPayload.top,
            width: 88,
            height: 64,
        }));
    }
    else {
        yield effects_1.call(redux_openfin_1.Window.asyncs.setBounds, redux_openfin_1.Window.actions.setBounds({
            left: getBoundsActionPayload.left,
            top: getBoundsActionPayload.top,
            width: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,
            height: 64,
        }));
    }
}
exports.handleApplicationLaunchBarToggleCollapse = handleApplicationLaunchBarToggleCollapse;
function* handleApplicationLaunchBarClose() {
    const mainWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({
        appUuid: init_1.default.finUuid,
        windowName: init_1.default.finUuid,
    }));
    const mainWindow = mainWindowAction.payload.window;
    mainWindow.close(false);
}
exports.handleApplicationLaunchBarClose = handleApplicationLaunchBarClose;
function* handleApplicationLaunchNewWindow(action) {
    if (window.name === init_1.default.finUuid) {
        const appJson = action.payload;
        const windowName = appJson.name;
        const wrapWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({
            appUuid: init_1.default.finUuid,
            windowName,
        }));
        if (wrapWindowAction.payload &&
            wrapWindowAction.payload.window &&
            wrapWindowAction.payload.window.nativeWindow) {
            // already created, not need to create anymore
            const theWindow = wrapWindowAction.payload.window;
            theWindow.show(true);
            theWindow.bringToFront();
        }
        else {
            // not created, need to create one
            const defaultWidth = yield effects_1.select(exports.getNewWindowWidth);
            const defaultHeight = yield effects_1.select(exports.getNewWindowHeight);
            const defaultTop = yield effects_1.select(exports.getNewWindowTop);
            const defaultLeft = yield effects_1.select(exports.getNewWindowLeft);
            if (!appJson.defaultWidth) {
                appJson.defaultWidth = defaultWidth;
            }
            if (!appJson.defaultHeight) {
                appJson.defaultHeight = defaultHeight;
            }
            if (!appJson.defaultTop) {
                appJson.defaultTop = defaultTop;
            }
            if (!appJson.defaultLeft) {
                appJson.defaultLeft = defaultLeft;
            }
            const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow(appJson));
            const newWindow = newWindowResAction.payload.window;
            newWindow.bringToFront();
            yield effects_1.put(__1.configUpdateNewWindowPosition());
        }
    }
}
exports.handleApplicationLaunchNewWindow = handleApplicationLaunchNewWindow;
function* handleGroupChanged(action) {
    const { sourceWindowName, targetWindowName, memeberOf, reason } = action.payload;
    if (reason === redux_openfin_1.Docking.types.GroupEventReason.JOIN) {
        if (sourceWindowName === window.name) {
            yield effects_1.put(__1.applicationNewSnackbar({
                message: 'Joined group',
                variant: 'primary'
            }));
        }
        else if (targetWindowName === window.name) {
            yield effects_1.put(__1.applicationNewSnackbar({
                message: 'Been joined',
                variant: 'rose'
            }));
        }
    }
    else if (reason === redux_openfin_1.Docking.types.GroupEventReason.LEAVE &&
        sourceWindowName === window.name) {
        yield effects_1.put(__1.applicationNewSnackbar({
            message: 'Left group',
            variant: 'primary'
        }));
    }
    else if (reason === redux_openfin_1.Docking.types.GroupEventReason.DISBAND &&
        sourceWindowName === window.name) {
        yield effects_1.put(__1.applicationNewSnackbar({
            message: 'Got disbanded',
            variant: 'rose'
        }));
    }
}
exports.handleGroupChanged = handleGroupChanged;
function* default_1() {
    yield effects_1.takeLatest(__1.APPLICATION_START, handleApplicationLoading);
    yield effects_1.takeLatest(__1.APPLICATION_CHILD_START, handleApplicationChildLoading);
    yield effects_1.takeLatest(__1.APPLICATION_NOTIFICATION_START, handleApplicationNotificationLoading);
    yield effects_1.takeLatest(redux_openfin_1.Event.actionDicts.windowEventDictByName['close-requested'].type, handleApplicationExit);
    yield effects_1.takeLatest(__1.APPLICATION_TOGGLE_WINDOW_STATE, handleToggleWindowState);
    yield effects_1.takeLatest(__1.APPLICATION_NEW_SNACKBAR, handleApplicationAddNewSnackBar);
    yield effects_1.takeLatest(__1.APPLICATION_CLOSE_SNACKBAR, handleApplicationCloseSnackBar);
    yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_TOGGLE, handleApplicationLaunchBarToggle);
    yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_TOGGLE_COLLAPSE, handleApplicationLaunchBarToggleCollapse);
    yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_CLOSE, handleApplicationLaunchBarClose);
    yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_NEW_WINDOW, handleApplicationLaunchNewWindow);
    yield effects_1.takeEvery(redux_openfin_1.Event.actionDicts.windowEventDictByName['group-changed'].type, handleGroupChanged);
}
exports.default = default_1;
//# sourceMappingURL=application.js.map