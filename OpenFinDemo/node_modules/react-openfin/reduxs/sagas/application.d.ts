import { Action } from "redux-actions";
import { IRootState, APPLICATION_LAUNCH_BAR_STATUS } from '..';
export declare const LOADING_VIEW_UUID: string;
export declare const LAUNCHBAR_VIEW_UUID: string;
export declare const getSnackBarOpen: (state: IRootState) => boolean;
export declare const getLaunchBarCollapse: (state: IRootState) => boolean;
export declare const getWindowsState: (state: IRootState) => string;
export declare const getNewWindowTop: (state: IRootState) => number;
export declare const getNewWindowLeft: (state: IRootState) => number;
export declare const getNewWindowWidth: (state: IRootState) => number;
export declare const getNewWindowHeight: (state: IRootState) => number;
export declare function handleShowLoadingView(monitorRect: any): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor>>;
export declare function handleHideFromLoadingView(monitorRect: any, targetUrl?: string): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<import("redux-openfin/window").ShowPayload>>>>;
export declare function handleApplicationLoading(): IterableIterator<any>;
export declare function handleApplicationChildLoading(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>> | import("@redux-saga/types").CombinatorEffect<"RACE", import("@redux-saga/types").SimpleEffect<"TAKE", import("redux-saga/effects").TakeEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor>> | import("@redux-saga/types").CombinatorEffect<"ALL", import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>>> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<{
    docked: any;
}>>>>;
export declare function handleApplicationNotificationLoading(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>> | import("@redux-saga/types").CombinatorEffect<"RACE", import("@redux-saga/types").SimpleEffect<"TAKE", import("redux-saga/effects").TakeEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor>> | import("@redux-saga/types").CombinatorEffect<"ALL", import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>>>>;
export declare function handleApplicationExit(): IterableIterator<import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>> | import("@redux-saga/types").CombinatorEffect<"RACE", import("@redux-saga/types").SimpleEffect<"TAKE", import("redux-saga/effects").TakeEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor>> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<import("redux-openfin/window").ClosePayload>>>>;
export declare function handleApplicationAddNewSnackBar(): IterableIterator<import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<{
    snackBarOpen: boolean;
}>>>>;
export declare function handleApplicationCloseSnackBar(action: any): IterableIterator<import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<{
    snackBarOpen: boolean;
}>>>>;
export declare function handleToggleWindowState(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor>>;
export declare function handleApplicationLaunchBarToggle(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<{
    status: APPLICATION_LAUNCH_BAR_STATUS;
}>>>>;
export declare function handleApplicationLaunchBarToggleCollapse(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor>>;
export declare function handleApplicationLaunchBarClose(): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor>>;
export declare function handleApplicationLaunchNewWindow(action: any): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<void>>>>;
export declare function handleGroupChanged(action: any): IterableIterator<import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<Action<import("..").IApplicationNewSnackbarOption>>>>;
export default function (): IterableIterator<import("@redux-saga/types").SimpleEffect<"FORK", import("redux-saga/effects").ForkEffectDescriptor>>;
