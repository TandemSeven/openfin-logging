"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_redux_1 = require("react-redux");
const redux_openfin_1 = require("redux-openfin");
const GlobalTypes_1 = require("../GlobalTypes");
const context_1 = require("../reduxs/application/context");
const reduxs_1 = require("../reduxs");
const ApplicationCtxProivder = ({ children, state, actions, }) => {
    return (React.createElement(React.Fragment, null,
        React.createElement(context_1.ApplicationContextProvider, { value: {
                state,
                actions,
            } }, children)));
};
exports.default = react_redux_1.connect((state) => ({
    state: state.application,
}), (dispatch) => ({
    actions: {
        launchNewWin: (appJson) => { dispatch(reduxs_1.applicationLaunchNewWindow(appJson)); },
        onSetLoadingMsg: (label) => { dispatch(reduxs_1.applicationSetLoadingMsg(label)); },
        onApplicationStart: () => { dispatch(reduxs_1.applicationStart()); },
        onApplicationReady: (readyConfig) => {
            dispatch(reduxs_1.applicationReady(readyConfig));
        },
        onChildWinStart: () => { dispatch(reduxs_1.applicationChildStart()); },
        onChildWinReady: (readyConfig) => {
            dispatch(reduxs_1.applicationChildReady(readyConfig));
        },
        onNotificationStart: () => { dispatch(reduxs_1.applicationNotificationStart()); },
        onNotificationReady: (readyConfig) => {
            dispatch(reduxs_1.applicationNotificationReady(readyConfig));
        },
        onNewSnackBar: (newSnackBar) => { dispatch(reduxs_1.applicationNewSnackbar(newSnackBar)); },
        onSnackBarClose: (event, reason) => { dispatch(reduxs_1.applicationCloseSnackbar(event, reason)); },
        onSnackBarCloseBtnClick: () => { dispatch(reduxs_1.applicationSetSnackbarStatus(false)); },
        onSnackBarExited: () => { dispatch(reduxs_1.applicationProcessSnackbarQueue()); },
        onDrawerToggle: () => { dispatch(reduxs_1.applicationDrawerToggle()); },
        onLaunchBarClose: () => { dispatch(reduxs_1.applicationLaunchBarClose()); },
        onLaunchBarToggleCollapse: () => { dispatch(reduxs_1.applicationLaunchBarToggleCollapse()); },
        onLaunchBarToggle: () => { dispatch(reduxs_1.applicationLaunchBarToggle()); },
        onSetAsForeground: () => { dispatch((redux_openfin_1.Window.actions.setAsForeground({}))); },
        onUndock: () => { dispatch((redux_openfin_1.Window.actions.leaveGroup({}))); },
        onToggleWinState: () => { dispatch(reduxs_1.applicationToggleWindowState()); },
        onMinimize: () => { dispatch((redux_openfin_1.Window.actions.minimize({}))); },
        onWinClose: () => { dispatch((redux_openfin_1.Window.actions.close({ force: false }))); },
        onWinForceClose: () => { dispatch((redux_openfin_1.Window.actions.close({ force: true }))); },
        launchNewNotification: (options) => {
            dispatch((redux_openfin_1.Notification.actions.createNotification(options)));
        },
        onNotificationClose: () => { dispatch((redux_openfin_1.Notification.actions.close({}))); },
    }
}), null, { context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX })(ApplicationCtxProivder);
//# sourceMappingURL=ApplicationCtxProvider.js.map