"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_redux_1 = require("react-redux");
const init_1 = require("../init");
const GlobalTypes_1 = require("../GlobalTypes");
const reduxs_1 = require("../reduxs");
const reducer_1 = require("../reduxs/config/reducer");
const context_1 = require("../reduxs/config/context");
const constant_1 = require("../reduxs/config/constant");
const ConfigCtxProvider = ({ children, config, actions, }) => {
    // todo: consider remove configExtendCustState act if initState works
    react_1.useEffect(() => {
        // console.log('[react-openfin] ConfigCtxProvider:: static useEffect 0#',initState.configTabs);
        if (init_1.default.configTabs && init_1.default.configTabs.length > 0) {
            const customState = reducer_1.buildDefaultConfigState([...constant_1.default, ...init_1.default.configTabs]);
            // console.log('[react-openfin] ConfigCtxProvider::static useEffect 1#', customState);
            actions.onExtendCustomState(customState);
        }
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(context_1.ConfigContextProvider, { value: {
                config,
                actions,
            } }, children)));
};
exports.default = react_redux_1.connect((state) => ({
    config: state.config,
    theme: state.config.application.theme,
}), (dispatch) => ({
    onUpdateLangField: (value) => {
        dispatch(reduxs_1.configUpdateOneField('application', 'language', value));
    },
    onUpdateGlobalFilterString: (filterString) => {
        dispatch(reduxs_1.configUpdateGlobalFilterStr(filterString));
    },
    onUpdateOneField: (tabName, fieldName, value) => {
        dispatch(reduxs_1.configUpdateOneField(tabName, fieldName, value));
    },
    onExtendCustomState: (customState) => {
        dispatch(reduxs_1.configExtendCustState(customState));
    }
}), (stateProps, actionsProps, ownProps) => (Object.assign({}, ownProps, { config: stateProps.config, actions: Object.assign({}, actionsProps, { onToggleThemeField: () => {
            actionsProps.onUpdateOneField('application', 'theme', stateProps.theme === reduxs_1.MuiTheme.DARK ? reduxs_1.MuiTheme.LIGHT : reduxs_1.MuiTheme.DARK);
        } }) })), { context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX })(ConfigCtxProvider);
//# sourceMappingURL=ConfigCtxProvider.js.map