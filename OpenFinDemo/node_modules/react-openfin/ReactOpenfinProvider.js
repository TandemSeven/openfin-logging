"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_1 = require("react");
const react_redux_1 = require("react-redux");
const GlobalTypes_1 = require("./GlobalTypes");
const configureStore_1 = require("./utils/configureStore");
const reduxs_1 = require("./reduxs");
const init_1 = require("./init");
const ApplicationCtxProvider_1 = require("./providers/ApplicationCtxProvider");
const ConfigCtxProvider_1 = require("./providers/ConfigCtxProvider");
const ReactOpenfinProvider = ({ children }) => {
    const seed = react_1.useMemo(() => {
        // init store
        const store = configureStore_1.default(init_1.default.fin, init_1.default.finUuid, init_1.default.sharedActions, init_1.default.config.enableAutoDocking, init_1.default.dockingOptions, window.name == init_1.default.finUuid ?
            void 0 :
            window.opener[GlobalTypes_1.REACT_OPENFIN_STORE].getState());
        window[GlobalTypes_1.REACT_OPENFIN_STORE] = store;
        window[GlobalTypes_1.REACT_OPENFIN_DISPATCH_FIELD_NAME] = store.dispatch;
        window.addEventListener('online', () => {
            store.dispatch(reduxs_1.applicationNetworkOnline());
        });
        window.addEventListener('offline', () => {
            store.dispatch(reduxs_1.applicationNetworkOffline());
        });
        init_1.default.seed = store;
        return store;
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(react_redux_1.Provider, { store: seed, context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX },
            React.createElement(ApplicationCtxProvider_1.default, null,
                React.createElement(ConfigCtxProvider_1.default, null, children)))));
};
exports.default = ReactOpenfinProvider;
//# sourceMappingURL=ReactOpenfinProvider.js.map