import i18n from "i18next";
import { History } from "history";
import { Dispatch, Store } from 'redux';
import { InitSeed, ILaunchBarItem } from "./GlobalTypes";
import { IDockingOptions } from "redux-openfin/docking";
import { IConfigTab } from "./reduxs/config/types";
interface IInitStateConfig {
    publicUrl: string;
    logActions: boolean;
    enableLoadingView: boolean;
    enableAutoDocking: boolean;
    defaultDashboardDrawerShown: boolean;
    defaultViewUrl: string;
    defaultDashboardViewUrl: string;
    defaultDashboardMinWidth: number;
    defaultDashboardMinHeight: number;
    defaultLoadingBannerWidth: number;
    defaultLoadingBannerHeight: number;
    defaultAppHeight: number;
    defaultAppWidth: number;
    newWindowTop: number;
    newWindowLeft: number;
    newWindowWidth: number;
    newWindowHeight: number;
    newWindowDeltaLeft: number;
    newWindowDeltaHeight: number;
    onAppAwaitDelayTime: number;
    onAppChildAwaitDelayTime: number;
    onAppNotificationAwaitDelayTime: number;
    onAppClosingAwaitDelayTime: number;
}
interface IInitState {
    fin: any;
    finUuid: string;
    sharedActions: string[];
    sharedActionsDict: Set<string>;
    i18n: typeof i18n;
    hist: History;
    dockingOptions: Partial<IDockingOptions>;
    launchBarItems: ILaunchBarItem[];
    configTabs: IConfigTab[];
    clientReduxDispatch: Dispatch<any>;
    config: IInitStateConfig;
    seed: InitSeed;
}
declare const initState: IInitState;
export interface IInitReactOpenfinParametersObj {
    fin?: any;
    finMockupForceSilentMode?: boolean;
    finUuid: string;
    sharedActions?: string[];
    i18n: typeof i18n;
    hist: History;
    config?: Partial<IInitStateConfig>;
    dockingOptions?: Partial<IDockingOptions>;
    launchBarItems?: ILaunchBarItem[];
    configTabs?: IConfigTab[];
    clientReduxStore?: Store<any>;
}
export declare const InitializeReactOpenfin: (params: IInitReactOpenfinParametersObj) => void;
export default initState;
