"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const openfin_browser_adapter_1 = require("openfin-browser-adapter");
const sharedActions_1 = require("./reduxs/sharedActions");
const initSharedActionsDict = new Set();
sharedActions_1.default.forEach((actionType) => {
    initSharedActionsDict.add(actionType);
});
const initState = {
    fin: void 0,
    finUuid: void '',
    sharedActions: [...sharedActions_1.default],
    sharedActionsDict: initSharedActionsDict,
    i18n: void 0,
    hist: void 0,
    dockingOptions: {},
    launchBarItems: [],
    configTabs: [],
    clientReduxDispatch: void 0,
    config: {
        publicUrl: '',
        logActions: false,
        enableLoadingView: true,
        enableAutoDocking: true,
        defaultDashboardDrawerShown: true,
        defaultViewUrl: '/dashboard/view-one',
        defaultDashboardViewUrl: '/dashboard/accessibility',
        defaultDashboardMinWidth: 570,
        defaultDashboardMinHeight: 300,
        defaultLoadingBannerWidth: 728,
        defaultLoadingBannerHeight: 450,
        defaultAppHeight: 900,
        defaultAppWidth: 1400,
        newWindowTop: 60,
        newWindowLeft: 300,
        newWindowWidth: 640,
        newWindowHeight: 320,
        newWindowDeltaLeft: 40,
        newWindowDeltaHeight: 40,
        onAppAwaitDelayTime: 4000,
        onAppChildAwaitDelayTime: 200,
        onAppNotificationAwaitDelayTime: 200,
        onAppClosingAwaitDelayTime: 200,
    },
    seed: void 0,
};
exports.InitializeReactOpenfin = (params) => {
    if (params.fin) {
        window.fin = params.fin;
        initState.fin = params.fin;
    }
    else {
        window.fin = new openfin_browser_adapter_1.BrowserAdapter({
            finUuid: params.finUuid,
            silentMode: params.finMockupForceSilentMode,
        });
        initState.fin = window.fin;
    }
    initState.finUuid = params.finUuid;
    if (params.sharedActions && params.sharedActions.length > 0) {
        initState.sharedActions = [...sharedActions_1.default, ...params.sharedActions];
        params.sharedActions.forEach(actionType => {
            initState.sharedActionsDict.add(actionType);
        });
    }
    initState.i18n = params.i18n;
    initState.hist = params.hist;
    if (params.config) {
        initState.config = Object.assign({}, initState.config, params.config);
    }
    if (params.dockingOptions) {
        initState.dockingOptions = params.dockingOptions;
    }
    if (params.launchBarItems) {
        initState.launchBarItems = params.launchBarItems;
    }
    if (params.configTabs) {
        initState.configTabs = params.configTabs.filter(oneConfigTab => oneConfigTab._name !== 'application');
    }
    if (params.clientReduxStore) {
        initState.clientReduxDispatch = params.clientReduxStore.dispatch;
    }
};
exports.default = initState;
//# sourceMappingURL=init.js.map