{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst init_1 = require(\"../init\");\n\nconst GlobalTypes_1 = require(\"../GlobalTypes\");\n/**\n * async wrapper for api v2\n *\n *\n * @param action\n * @param resActionCreator\n * @param finCb\n */\n\n\nfunction wrapAsyncFun(action, resActionCreator, finCb) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const libReduxDispatch = action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME] && window[action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME]] ? window[action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME]] : void 0;\n\n    if (init_1.initState.fin) {\n      try {\n        const successRes = yield finCb(init_1.initState.fin);\n\n        if (libReduxDispatch) {\n          libReduxDispatch(successRes);\n        } else if (init_1.initState.store) {\n          init_1.initState.store.dispatch(successRes);\n        }\n\n        return successRes;\n      } catch (error) {\n        if (init_1.initState.store) {\n          const rejectAction = resActionCreator({\n            name: 'Error',\n            error\n          });\n\n          if (libReduxDispatch) {\n            libReduxDispatch(action);\n          } else if (init_1.initState.store) {\n            init_1.initState.store.dispatch(rejectAction);\n          }\n        }\n\n        ;\n        throw error;\n      }\n    } else {\n      if (init_1.initState.store) {\n        const rejectAction = resActionCreator({\n          name: 'Error',\n          error: new Error(GlobalTypes_1.FIN_NOT_INJECTED_MSG)\n        });\n        init_1.initState.store.dispatch(rejectAction);\n        throw rejectAction.error;\n      } else {\n        throw GlobalTypes_1.FIN_NOT_INJECTED_MSG;\n      }\n    }\n  });\n}\n\nexports.default = wrapAsyncFun;","map":null,"metadata":{},"sourceType":"script"}