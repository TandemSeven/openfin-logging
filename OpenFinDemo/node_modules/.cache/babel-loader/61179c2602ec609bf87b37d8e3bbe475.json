{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst redux_actions_1 = require(\"redux-actions\");\n\nconst init_1 = require(\"../../init\");\n\nconst actions_1 = require(\"./actions\");\n\nconst constant_1 = require(\"./constant\");\n\nfunction buildDefaultConfigState(configTabs) {\n  const result = {\n    configGlobalFilterString: '',\n    _tabs: configTabs\n  };\n  configTabs.forEach(oneTab => {\n    oneTab._fieldLabels = '';\n    result[oneTab._name] = {};\n\n    oneTab._fields.forEach(oneField => {\n      oneTab._fieldLabels = oneTab._fieldLabels + oneField._label;\n\n      if (oneField._name && (oneField._defaultValue || oneField._defaultValue === \"\")) {\n        result[oneTab._name][oneField._name] = oneField._defaultValue;\n      }\n    });\n  });\n  return result;\n}\n\nexports.buildDefaultConfigState = buildDefaultConfigState;\nexports.defaultState = buildDefaultConfigState(constant_1.default);\n\nexports.buildInitState = parentWindowState => {\n  return exports.defaultState;\n};\n\nexports.reducerMap = {\n  [actions_1.CONFIG_RESET]: (state, action) => {\n    const tabName = action.payload.tabName;\n\n    if (tabName) {\n      return Object.assign({}, state, {\n        tabName: exports.defaultState[tabName]\n      });\n    } else {\n      return exports.defaultState;\n    }\n  },\n  [actions_1.CONFIG_DO_UPDATE_ONE_FIELD]: (state, action) => {\n    const _action$payload = action.payload,\n          tabName = _action$payload.tabName,\n          fieldName = _action$payload.fieldName,\n          value = _action$payload.value;\n    return Object.assign({}, state, {\n      [tabName]: Object.assign({}, state[tabName], {\n        [fieldName]: value\n      })\n    });\n  },\n  [actions_1.CONFIG_UPDATE_GLOBAL_FILTER_STR]: (state, action) => {\n    const configGlobalFilterString = action.payload.configGlobalFilterString;\n    return Object.assign({}, state, {\n      configGlobalFilterString\n    });\n  },\n  [actions_1.CONFIG_EXTEND_CUST_STATE]: (state, action) => {\n    const custState = action.payload;\n\n    if (custState.application) {\n      delete custState.application;\n    }\n\n    return Object.assign({}, state, custState);\n  },\n  [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_ADD_DELTA]: (state, action) => {\n    const applicationConfig = state.application;\n    return Object.assign({}, state, {\n      application: Object.assign({}, state.application, {\n        newWinTop: applicationConfig.newWinTop + applicationConfig.newWindDeltaHeight,\n        newWinLeft: applicationConfig.newWinLeft + applicationConfig.newWindDeltaLeft\n      })\n    });\n  },\n  [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_RESET_TOP]: (state, action) => Object.assign({}, state, {\n    application: Object.assign({}, state.application, {\n      newWinTop: init_1.default.config.newWindowTop\n    })\n  }),\n  [actions_1.CONFIG_UPDATE_NEW_WINDOW_POSITION_RESET_LEFT]: (state, action) => Object.assign({}, state, {\n    application: Object.assign({}, state.application, {\n      newWinLeft: init_1.default.config.newWindowLeft\n    })\n  })\n}; // const reducer = (state:IConfigState, action:Action<any>):IConfigState => {\n//\n//     if (action.type && reducerMap[action.type]){\n//         return reducerMap[action.type](state,action);\n//     }else{\n//         return state;\n//     }\n//\n// }\n\nexports.reducerCreator = parentState => {\n  return redux_actions_1.handleActions(exports.reducerMap, exports.buildInitState(parentState));\n};\n\nexports.default = exports.reducerCreator;","map":null,"metadata":{},"sourceType":"script"}