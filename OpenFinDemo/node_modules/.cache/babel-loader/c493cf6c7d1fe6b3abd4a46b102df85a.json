{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst handlerActions = require(\"./actions/handlerActionCreator\");\n\nconst wrapAsyncFun_1 = require(\"../utils/wrapAsyncFun\");\n\nfunction getMachineId(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getMachineIdRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const id = yield fin.System.getMachineId();\n      return handlerActions.getMachineIdRes({\n        id\n      });\n    }));\n  });\n}\n\nexports.getMachineId = getMachineId;\n\nfunction getDeviceUserId(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getDeviceUserIdRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const id = yield fin.System.getDeviceUserId();\n      return handlerActions.getDeviceUserIdRes({\n        id\n      });\n    }));\n  });\n}\n\nexports.getDeviceUserId = getDeviceUserId;\n\nfunction getMonitorInfo(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getMonitorInfoRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const monitorInfo = yield fin.System.getMonitorInfo();\n      return handlerActions.getMonitorInfoRes(monitorInfo);\n    }));\n  });\n}\n\nexports.getMonitorInfo = getMonitorInfo;\n\nfunction getVersion(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getVersionRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const version = yield fin.System.getVersion();\n      return handlerActions.getVersionRes({\n        version\n      });\n    }));\n  });\n}\n\nexports.getVersion = getVersion;\n\nfunction getHostSpecs(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getHostSpecsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const info = yield fin.System.getHostSpecs();\n      return handlerActions.getHostSpecsRes(info);\n    }));\n  });\n}\n\nexports.getHostSpecs = getHostSpecs;\n\nfunction getEnvironmentVariable(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const env = action.payload.env;\n    return wrapAsyncFun_1.default(action, handlerActions.getEnvironmentVariableRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const value = yield fin.System.getEnvironmentVariable(env);\n      return handlerActions.getEnvironmentVariableRes({\n        env,\n        value\n      });\n    }));\n  });\n}\n\nexports.getEnvironmentVariable = getEnvironmentVariable;\n\nfunction clearCache(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = action.payload;\n    return wrapAsyncFun_1.default(action, handlerActions.clearCacheRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield fin.System.clearCache(options);\n      return handlerActions.clearCacheRes({});\n    }));\n  });\n}\n\nexports.clearCache = clearCache;","map":null,"metadata":{},"sourceType":"script"}