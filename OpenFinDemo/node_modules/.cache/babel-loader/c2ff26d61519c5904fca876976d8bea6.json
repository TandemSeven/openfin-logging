{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst init_1 = require(\"../init\");\n\nconst handlerActions = require(\"./actions/handlerActionCreator\");\n\nconst wrapAsyncFun_1 = require(\"../utils/wrapAsyncFun\");\n/**\n * Wrappered apis of Application package\n * //https://cdn.openfin.co/docs/javascript/stable/Application.html\n */\n\n\nfunction start(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = action.payload;\n    return wrapAsyncFun_1.default(action, handlerActions.startApplicationRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let app = yield fin.Application.start(options);\n      return handlerActions.startApplicationRes({\n        app\n      });\n    }));\n  });\n}\n\nexports.start = start;\n\nfunction getCurrent(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield wrapAsyncFun_1.default(action, handlerActions.getCurrentRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let application;\n\n      if (init_1.initState.currentApplication) {\n        application = init_1.initState.currentApplication;\n      } else {\n        application = yield fin.Application.getCurrent();\n        init_1.initState.currentApplication = application;\n      }\n\n      return handlerActions.getCurrentRes({\n        application\n      });\n    }));\n  });\n}\n\nexports.getCurrent = getCurrent;\n\nfunction getWindow(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getWindowRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const mainWindow = yield init_1.initState.currentApplication.getWindow();\n      return handlerActions.getWindowRes({\n        mainWindow\n      });\n    }));\n  });\n}\n\nexports.getWindow = getWindow;\n\nfunction wrap(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const uuid = action.payload.uuid;\n    return wrapAsyncFun_1.default(action, handlerActions.wrapRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const application = yield fin.Application.wrap({\n        uuid\n      });\n      return handlerActions.wrapRes({\n        application\n      });\n    }));\n  });\n}\n\nexports.wrap = wrap;\n\nfunction addListener(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload = action.payload,\n          type = _action$payload.type,\n          listener = _action$payload.listener,\n          options = _action$payload.options;\n    return wrapAsyncFun_1.default(action, handlerActions.addListenerRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.addListener(type, listener, options);\n      return handlerActions.addListenerRes({});\n    }));\n  });\n}\n\nexports.addListener = addListener;\n\nfunction quit(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const force = action.payload.force;\n    return wrapAsyncFun_1.default(action, handlerActions.quitRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let application = yield fin.Application.getCurrent();\n      yield application.quit(force);\n      return handlerActions.quitRes({});\n    }));\n  });\n}\n\nexports.quit = quit;\n\nfunction getChildWindows(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getChildWindowsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const children = yield init_1.initState.currentApplication.getChildWindows();\n      return handlerActions.getChildWindowsRes({\n        children\n      });\n    }));\n  });\n}\n\nexports.getChildWindows = getChildWindows;\n\nfunction getInfo(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getInfoRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const info = yield init_1.initState.currentApplication.getInfo();\n      return handlerActions.getInfoRes({\n        info\n      });\n    }));\n  });\n}\n\nexports.getInfo = getInfo;\n\nfunction getShortcuts(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getShortcutsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const config = yield init_1.initState.currentApplication.getShortcuts();\n      return handlerActions.getShortcutsRes({\n        config\n      });\n    }));\n  });\n}\n\nexports.getShortcuts = getShortcuts;\n\nfunction getTrayIconInfo(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getTrayIconInfoRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const trayInfo = yield init_1.initState.currentApplication.getTrayIconInfo();\n      return handlerActions.getTrayIconInfoRes({\n        trayInfo\n      });\n    }));\n  });\n}\n\nexports.getTrayIconInfo = getTrayIconInfo;\n\nfunction getZoomLevel(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getZoomLevelRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const level = yield init_1.initState.currentApplication.getZoomLevel();\n      return handlerActions.getZoomLevelRes({\n        level\n      });\n    }));\n  });\n}\n\nexports.getZoomLevel = getZoomLevel;\n\nfunction isRunning(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.isRunningRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const running = yield init_1.initState.currentApplication.isRunning();\n      return handlerActions.isRunningRes({\n        running\n      });\n    }));\n  });\n}\n\nexports.isRunning = isRunning;\n\nfunction removeListener(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload2 = action.payload,\n          type = _action$payload2.type,\n          listener = _action$payload2.listener,\n          options = _action$payload2.options;\n    return wrapAsyncFun_1.default(action, handlerActions.removeListenerRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.removeListener(type, listener, options);\n      return handlerActions.removeListenerRes({});\n    }));\n  });\n}\n\nexports.removeListener = removeListener;\n\nfunction restart(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.restartRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.restart();\n      return handlerActions.restartRes({});\n    }));\n  });\n}\n\nexports.restart = restart;\n\nfunction scheduleRestart(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.scheduleRestartRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.scheduleRestart();\n      return handlerActions.scheduleRestartRes({});\n    }));\n  });\n}\n\nexports.scheduleRestart = scheduleRestart;\n\nfunction setShortcuts(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const config = action.payload.config;\n    return wrapAsyncFun_1.default(action, handlerActions.setShortcutsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.setShortcuts(config);\n      return handlerActions.setShortcutsRes({});\n    }));\n  });\n}\n\nexports.setShortcuts = setShortcuts;\n\nfunction setTrayIcon(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const iconUrl = action.payload.iconUrl;\n    return wrapAsyncFun_1.default(action, handlerActions.setTrayIconRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.setTrayIcon(iconUrl);\n      return handlerActions.setTrayIconRes({});\n    }));\n  });\n}\n\nexports.setTrayIcon = setTrayIcon;\n\nfunction setZoomLevel(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const level = action.payload.level;\n    return wrapAsyncFun_1.default(action, handlerActions.setZoomLevelRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.setZoomLevel(level);\n      return handlerActions.setZoomLevelRes({});\n    }));\n  });\n}\n\nexports.setZoomLevel = setZoomLevel;\n\nfunction terminate(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.terminateRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentApplication.terminate();\n      return handlerActions.terminateRes({});\n    }));\n  });\n}\n\nexports.terminate = terminate;","map":null,"metadata":{},"sourceType":"script"}