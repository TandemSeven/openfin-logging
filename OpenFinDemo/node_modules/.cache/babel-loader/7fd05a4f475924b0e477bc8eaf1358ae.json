{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar OpenFinMockV2 = function () {\n  function OpenFinMockV2() {}\n\n  OpenFinMockV2.generateMethods = function (name, Klass) {\n    var _this = this;\n\n    var staticMethods = Klass.staticMethods || [];\n    var staticSyncMethods = Klass.staticSyncMethods || [];\n    var instanceMethods = Klass.instanceMethods || [];\n    var instanceSyncMethods = Klass.instanceSyncMethods || [];\n\n    var _loop_1 = function (method) {\n      if (Klass[method]) {\n        console.warn(\"[OpenFinMock] Warning! Attempt to overwrite already implemented static methods:`\" + name + \".\" + method + \"`. This method will not be overwritten. Remove this method from `\" + name + \".staticMethods`.\");\n        return \"continue\";\n      }\n\n      Klass[method] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(_this, void 0, void 0, function () {\n          var argsMsg;\n          return __generator(this, function (_a) {\n            argsMsg = '';\n\n            if (args.length) {\n              argsMsg = \"This method also received the arguments: \" + JSON.stringify(args, null, 2);\n            }\n\n            if (!OpenFinMockV2.silentMode) {\n              console.info(\"[OpenFinMock] Static method `\" + name + \".\" + method + \"` not implemented. \\n                        \" + argsMsg + \" This method will not return anything, which will probably have unintended consequence.\\n                        Implement this method on the `\" + name + \"` class to return a value.               \\n                    \");\n            }\n\n            return [2];\n          });\n        });\n      };\n    };\n\n    for (var _i = 0, staticMethods_1 = staticMethods; _i < staticMethods_1.length; _i++) {\n      var method = staticMethods_1[_i];\n\n      _loop_1(method);\n    }\n\n    var _loop_2 = function (method) {\n      if (Klass[method]) {\n        console.warn(\"[OpenFinMock] Warning! Attempt to overwrite already implemented static async methods:`\" + name + \".\" + method + \"`. This method will not be overwritten. Remove this method from `\" + name + \".staticMethods`.\");\n        return \"continue\";\n      }\n\n      Klass[method] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var argsMsg = '';\n\n        if (args.length) {\n          argsMsg = \"This method also received the arguments: \" + JSON.stringify(args, null, 2);\n        }\n\n        if (args.length > 1 && typeof args[args.length - 2] === 'function') {\n          args[args.length - 2]();\n        }\n\n        if (!OpenFinMockV2.silentMode) {\n          console.info(\"[OpenFinMock] Static method `\" + name + \".\" + method + \"` not implemented. \\n                        \" + argsMsg + \" This method will not return anything, which will probably have unintended consequence.\\n                        Implement this method on the `\" + name + \"` class to return a value.               \\n                    \");\n        }\n      };\n    };\n\n    for (var _a = 0, staticSyncMethods_1 = staticSyncMethods; _a < staticSyncMethods_1.length; _a++) {\n      var method = staticSyncMethods_1[_a];\n\n      _loop_2(method);\n    }\n\n    var _loop_3 = function (method) {\n      if (Klass.prototype[method]) {\n        console.warn(\"[OpenFinMock] Warning! Attemp to overwrite already implemented instance method: `\" + name + \"#\" + method + \"`.\\n                    This method will not be overwritten. Remove this method from `\" + name + \".instanceMethods`.       \\n                \");\n        return \"continue\";\n      }\n\n      Klass.prototype[method] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(_this, void 0, void 0, function () {\n          var argsMsg;\n          return __generator(this, function (_a) {\n            argsMsg = '';\n\n            if (args.length) {\n              argsMsg = \"This method also received the arguments: \" + JSON.stringify(args, null, 2);\n            }\n\n            if (!OpenFinMockV2.silentMode) {\n              console.info(\"[OpenFinMock] Instance method `\" + name + \".\" + method + \"` not implemented. \\n                        \" + argsMsg + \" This method will not return anything, which will probably have unintended consequence.\\n                        Implement this method on the `\" + name + \"` class to return a value.               \\n                    \");\n            }\n\n            return [2];\n          });\n        });\n      };\n    };\n\n    for (var _b = 0, instanceMethods_1 = instanceMethods; _b < instanceMethods_1.length; _b++) {\n      var method = instanceMethods_1[_b];\n\n      _loop_3(method);\n    }\n\n    var _loop_4 = function (method) {\n      if (Klass.prototype[method]) {\n        console.warn(\"[OpenFinMock] Warning! Attemp to overwrite already implemented instance method: `\" + name + \"#\" + method + \"`.\\n                    This method will not be overwritten. Remove this method from `\" + name + \".instanceMethods`.       \\n                \");\n        return \"continue\";\n      }\n\n      Klass.prototype[method] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(_this, void 0, void 0, function () {\n          var argsMsg;\n          return __generator(this, function (_a) {\n            argsMsg = '';\n\n            if (args.length) {\n              argsMsg = \"This method also received the arguments: \" + JSON.stringify(args, null, 2);\n            }\n\n            if (args.length > 1 && typeof args[args.length - 2] === 'function') {\n              args[args.length - 2]();\n            }\n\n            if (!OpenFinMockV2.silentMode) {\n              console.info(\"[OpenFinMock] Instance method `\" + name + \".\" + method + \"` not implemented. \\n                        \" + argsMsg + \" This method will not return anything, which will probably have unintended consequence.\\n                        Implement this method on the `\" + name + \"` class to return a value.               \\n                    \");\n            }\n\n            return [2];\n          });\n        });\n      };\n    };\n\n    for (var _c = 0, instanceSyncMethods_1 = instanceSyncMethods; _c < instanceSyncMethods_1.length; _c++) {\n      var method = instanceSyncMethods_1[_c];\n\n      _loop_4(method);\n    }\n\n    return Klass;\n  };\n\n  OpenFinMockV2.silentMode = false;\n  return OpenFinMockV2;\n}();\n\nexports.OpenFinMockV2 = OpenFinMockV2;","map":null,"metadata":{},"sourceType":"script"}