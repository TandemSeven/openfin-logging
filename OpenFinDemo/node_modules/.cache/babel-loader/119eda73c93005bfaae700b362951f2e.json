{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst db_1 = require(\"./db\");\n\nexports.CONFIG_VERSION = 2;\n\nfunction findAll() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return db_1.default.table('configs').toArray();\n  });\n}\n\nexports.findAll = findAll;\n\nfunction findAllOfCurrentVersion() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return db_1.default.table('configs').where({\n      version: exports.CONFIG_VERSION\n    }).toArray();\n  });\n}\n\nexports.findAllOfCurrentVersion = findAllOfCurrentVersion;\n\nfunction findOneField(tabName, fieldName) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const configs = db_1.default.table('configs');\n    return yield configs.where({\n      tabName,\n      fieldName,\n      version: exports.CONFIG_VERSION\n    }).first();\n  });\n}\n\nexports.findOneField = findOneField;\n\nfunction findOneFieldVal(tabName, fieldName) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const oneItem = yield findOneField(tabName, fieldName);\n    return oneItem ? oneItem.value : null;\n  });\n}\n\nexports.findOneFieldVal = findOneFieldVal;\n\nfunction saveOrUpdateOneByTabNameFieldName(tabName, fieldName, value) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let one = null;\n    const configs = db_1.default.table('configs');\n    yield db_1.default.transaction('rw', configs, () => __awaiter(this, void 0, void 0, function* () {\n      const founds = yield configs.where({\n        tabName,\n        fieldName,\n        version: exports.CONFIG_VERSION\n      }).toArray(); // console.log('configDao::saveOrUpdateOneByTabNameFieldName',founds.length,founds,tabName,fieldName,value);\n\n      if (founds.length === 0) {\n        one = {\n          tabName,\n          fieldName,\n          value,\n          version: exports.CONFIG_VERSION\n        };\n        const id = yield configs.put(one);\n        one = yield configs.get(id);\n      } else if (founds.length === 1) {\n        one = founds[0];\n        yield configs.update(one.id, {\n          value\n        });\n        one = yield configs.get(one.id);\n      } else {\n        yield configs.bulkDelete(founds.map(one => one.id));\n        one = {\n          tabName,\n          fieldName,\n          value,\n          version: exports.CONFIG_VERSION\n        };\n        const id = yield configs.put(one);\n        one = yield configs.get(id);\n      }\n    }));\n    return one;\n  });\n}\n\nexports.saveOrUpdateOneByTabNameFieldName = saveOrUpdateOneByTabNameFieldName;\n\nfunction removeOneByTabNameAndFieldName(tabName, fieldName) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const configs = db_1.default.table('configs');\n    let result = 0;\n    yield db_1.default.transaction('rw', configs, () => __awaiter(this, void 0, void 0, function* () {\n      const founds = yield configs.where({\n        tabName,\n        fieldName,\n        version: exports.CONFIG_VERSION\n      }).toArray();\n\n      if (founds.length) {\n        yield configs.bulkDelete(founds.map(one => one.id));\n      }\n\n      result = founds.length;\n    }));\n    return result;\n  });\n}\n\nexports.removeOneByTabNameAndFieldName = removeOneByTabNameAndFieldName;","map":null,"metadata":{},"sourceType":"script"}