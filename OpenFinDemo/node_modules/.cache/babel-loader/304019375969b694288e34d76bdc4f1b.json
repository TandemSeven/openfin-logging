{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst effects_1 = require(\"redux-saga/effects\");\n\nconst redux_openfin_1 = require(\"redux-openfin\");\n\nconst __1 = require(\"..\");\n\nconst configDao_1 = require(\"../../dexies/configDao\");\n\nexports.getOneConfigField = (tabName, fieldName) => state => {\n  if (tabName in state.config && fieldName in state.config[tabName]) {\n    return state.config[tabName][fieldName];\n  } else {\n    return null;\n  }\n};\n\nexports.getNewWindowTop = state => state.config.application.newWinTop;\n\nexports.getNewWindowLeft = state => state.config.application.newWinLeft;\n\nexports.getNewWindowWidth = state => state.config.application.newWinWidth;\n\nexports.getNewWindowHeight = state => state.config.application.newWinHeight;\n\nfunction* handleConfigLoadFromDexie() {\n  const configs = yield effects_1.call(configDao_1.findAllOfCurrentVersion);\n\n  for (const config of configs) {\n    yield effects_1.put(__1.configDoUpdateOneField({\n      tabName: config.tabName,\n      fieldName: config.fieldName,\n      value: config.value\n    }));\n  }\n}\n\nexports.handleConfigLoadFromDexie = handleConfigLoadFromDexie;\n\nfunction* handleConfigUpdateOneField(action) {\n  const _action$payload = action.payload,\n        name = _action$payload.name,\n        value = _action$payload.value;\n  const paths = name.split('.');\n\n  if (paths.length === 2) {\n    yield effects_1.putResolve(__1.configDoUpdateOneField({\n      tabName: paths[0],\n      fieldName: paths[1],\n      value\n    }));\n    yield effects_1.put(__1.configDoUpdateOneFieldInDexie({\n      tabName: paths[0],\n      fieldName: paths[1],\n      value\n    }));\n  }\n}\n\nexports.handleConfigUpdateOneField = handleConfigUpdateOneField;\n\nfunction* handleConfigSelectOneField(action) {\n  const _action$payload2 = action.payload,\n        tabName = _action$payload2.tabName,\n        fieldName = _action$payload2.fieldName;\n  const value = yield effects_1.select(exports.getOneConfigField(tabName, fieldName));\n  const result = {\n    tabName,\n    fieldName,\n    value,\n    userObj: 'userObj' in action.payload ? action.payload.userObj : null\n  };\n  yield effects_1.putResolve(__1.configSelectOneFieldRes(result));\n}\n\nexports.handleConfigSelectOneField = handleConfigSelectOneField;\n\nfunction* handleConfigRemoveOneField(action) {\n  const _action$payload3 = action.payload,\n        tabName = _action$payload3.tabName,\n        fieldName = _action$payload3.fieldName;\n  yield effects_1.call(configDao_1.removeOneByTabNameAndFieldName, tabName, fieldName);\n\n  if ('value' in action.payload) {\n    yield effects_1.putResolve(__1.configDoUpdateOneField({\n      tabName,\n      fieldName,\n      value: action.payload.value\n    }));\n  } else {\n    yield effects_1.putResolve(__1.configDoUpdateOneField({\n      tabName,\n      fieldName,\n      value: {}\n    }));\n  }\n}\n\nexports.handleConfigRemoveOneField = handleConfigRemoveOneField;\n\nfunction* handleConfigUpdateOneFieldInDexie(action) {\n  const _action$payload4 = action.payload,\n        tabName = _action$payload4.tabName,\n        fieldName = _action$payload4.fieldName,\n        value = _action$payload4.value;\n  yield effects_1.call(configDao_1.saveOrUpdateOneByTabNameFieldName, tabName, fieldName, value);\n  yield effects_1.delay(800);\n}\n\nexports.handleConfigUpdateOneFieldInDexie = handleConfigUpdateOneFieldInDexie;\n\nfunction* handleConfigUpdateNewWindowPosition() {\n  const newWinWidth = yield effects_1.select(exports.getNewWindowWidth);\n  const newWinHeight = yield effects_1.select(exports.getNewWindowHeight);\n  const newWinTop = yield effects_1.select(exports.getNewWindowTop);\n  const newWinLeft = yield effects_1.select(exports.getNewWindowLeft);\n  const monitorInfoAction = yield effects_1.call(redux_openfin_1.System.asyncs.getMonitorInfo, redux_openfin_1.System.actions.getMonitorInfo({}));\n  const virtualScreen = monitorInfoAction.payload.virtualScreen; // console.log(\"configUpdateNewWindowPosition\",monitorInfoAction,virtualScreen);\n\n  if (newWinLeft + newWinWidth < virtualScreen.right && newWinTop + newWinHeight < virtualScreen.bottom) {\n    yield effects_1.putResolve(__1.configUpdateNewWindowPositionAddDelta());\n  } else {\n    if (newWinLeft + newWinWidth >= virtualScreen.right) {\n      yield effects_1.putResolve(__1.configUpdateNewWindowPositionResetLeft());\n    }\n\n    if (newWinTop + newWinHeight >= virtualScreen.bottom) {\n      yield effects_1.putResolve(__1.configUpdateNewWindowPositionResetTop());\n    }\n  }\n}\n\nexports.handleConfigUpdateNewWindowPosition = handleConfigUpdateNewWindowPosition;\n\nfunction* default_1() {\n  yield effects_1.takeEvery(__1.CONFIG_LOAD_FROM_DEXIE, handleConfigLoadFromDexie);\n  yield effects_1.takeEvery(__1.CONFIG_UPDATE_ONE_FIELD, handleConfigUpdateOneField);\n  yield effects_1.takeEvery(__1.CONFIG_SELECT_ONE_FIELD, handleConfigSelectOneField);\n  yield effects_1.takeEvery(__1.CONFIG_REMOVE_ONE_FIELD, handleConfigRemoveOneField);\n  yield effects_1.takeLatest(__1.CONFIG_DO_UPDATE_ONE_FIELD_IN_DEXIE, handleConfigUpdateOneFieldInDexie);\n  yield effects_1.takeLatest(__1.CONFIG_UPDATE_NEW_WINDOW_POSITION, handleConfigUpdateNewWindowPosition);\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}