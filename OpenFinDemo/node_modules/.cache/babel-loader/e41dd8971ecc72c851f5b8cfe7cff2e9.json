{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst init_1 = require(\"../init\");\n\nconst init_2 = require(\"../docking/init\");\n\nconst toLegacyFinWindow_1 = require(\"../utils/toLegacyFinWindow\");\n\nconst handlerActions = require(\"./actions/handlerActionCreator\");\n\nconst wrapAsyncFun_1 = require(\"../utils/wrapAsyncFun\");\n\nfunction getCurrent(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getCurrentRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let current;\n\n      if (init_1.initState.currentWindow) {\n        current = init_1.initState.currentWindow;\n      } else {\n        current = fin.Window.getCurrentSync();\n        init_1.initState.currentWindow = current;\n      }\n\n      return handlerActions.getCurrentRes({\n        current\n      });\n    }));\n  });\n}\n\nexports.getCurrent = getCurrent;\n\nfunction wrap(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload = action.payload,\n          appUuid = _action$payload.appUuid,\n          windowName = _action$payload.windowName;\n    return wrapAsyncFun_1.default(action, handlerActions.wrapRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let window = yield fin.Window.wrap({\n        uuid: appUuid,\n        name: windowName\n      });\n      return handlerActions.wrapRes({\n        window\n      });\n    }));\n  });\n}\n\nexports.wrap = wrap;\n\nfunction addListener(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload2 = action.payload,\n          type = _action$payload2.type,\n          listener = _action$payload2.listener,\n          options = _action$payload2.options;\n    return wrapAsyncFun_1.default(action, handlerActions.addListenerRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.addListener(type, listener, options);\n      return handlerActions.addListenerRes({});\n    }));\n  });\n}\n\nexports.addListener = addListener;\n\nfunction authenticate(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload3 = action.payload,\n          userName = _action$payload3.userName,\n          password = _action$payload3.password;\n    return wrapAsyncFun_1.default(action, handlerActions.authenticateRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.authenticate(userName, password);\n      return handlerActions.authenticateRes({});\n    }));\n  });\n}\n\nexports.authenticate = authenticate;\n\nfunction bringToFront(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.bringToFrontRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.bringToFront();\n      return handlerActions.bringToFrontRes({});\n    }));\n  });\n}\n\nexports.bringToFront = bringToFront;\n\nfunction createWindow(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = action.payload;\n    return wrapAsyncFun_1.default(action, handlerActions.createWindowRes, fin => __awaiter(this, void 0, void 0, function* () {\n      let window = yield fin.Window.create(options);\n\n      if (init_2.initState.dockingManager) {\n        init_2.initState.dockingManager.register(toLegacyFinWindow_1.default(window));\n      }\n\n      return handlerActions.createWindowRes({\n        window\n      });\n    }));\n  });\n}\n\nexports.createWindow = createWindow;\n\nfunction close(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const force = action.payload.force;\n    return wrapAsyncFun_1.default(action, handlerActions.closeRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.close(force);\n      return handlerActions.closeRes({});\n    }));\n  });\n}\n\nexports.close = close;\n\nfunction disableUserMovement(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.disableFrameRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.disableUserMovement();\n      return handlerActions.disableFrameRes({});\n    }));\n  });\n}\n\nexports.disableUserMovement = disableUserMovement;\n\nfunction enableUserMovement(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.enableFrameRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.enableUserMovement();\n      return handlerActions.enableFrameRes({});\n    }));\n  });\n}\n\nexports.enableUserMovement = enableUserMovement;\n\nfunction focus(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.focusRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.focus();\n      return handlerActions.focusRes({});\n    }));\n  });\n}\n\nexports.focus = focus;\n\nfunction getGroup(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getGroupRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const windows = yield init_1.initState.currentWindow.getGroup();\n      return handlerActions.getGroupRes({\n        windows\n      });\n    }));\n  });\n}\n\nexports.getGroup = getGroup;\n\nfunction getBounds(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getBoundsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const payload = yield init_1.initState.currentWindow.getBounds();\n      return handlerActions.getBoundsRes(payload);\n    }));\n  });\n}\n\nexports.getBounds = getBounds;\n\nfunction getState(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getStateRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const state = yield init_1.initState.currentWindow.getState();\n      return handlerActions.getStateRes({\n        state\n      });\n    }));\n  });\n}\n\nexports.getState = getState;\n\nfunction getOptions(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.getOptionsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      const options = yield init_1.initState.currentWindow.getOptions();\n      return handlerActions.getOptionsRes(options);\n    }));\n  });\n}\n\nexports.getOptions = getOptions;\n\nfunction hide(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.hideRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.hide();\n      return handlerActions.hideRes({});\n    }));\n  });\n}\n\nexports.hide = hide;\n\nfunction joinGroup(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload4 = action.payload,\n          currentWindow = _action$payload4.currentWindow,\n          targetWindow = _action$payload4.targetWindow;\n    return wrapAsyncFun_1.default(action, handlerActions.joinGroupRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield currentWindow.joinGroup(targetWindow);\n      return handlerActions.joinGroupRes({});\n    }));\n  });\n}\n\nexports.joinGroup = joinGroup;\n\nfunction leaveGroup(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const targetWindow = action.payload.targetWindow;\n    return wrapAsyncFun_1.default(action, handlerActions.leaveGroupRes, fin => __awaiter(this, void 0, void 0, function* () {\n      if (targetWindow) {\n        yield targetWindow.leaveGroup();\n      } else {\n        yield init_1.initState.currentWindow.leaveGroup();\n      }\n\n      return handlerActions.leaveGroupRes({});\n    }));\n  });\n}\n\nexports.leaveGroup = leaveGroup;\n\nfunction maximize(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.maximizeRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.maximize();\n      return handlerActions.maximizeRes({});\n    }));\n  });\n}\n\nexports.maximize = maximize;\n\nfunction mergeGroups(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload5 = action.payload,\n          currentWindow = _action$payload5.currentWindow,\n          targetWindow = _action$payload5.targetWindow;\n    return wrapAsyncFun_1.default(action, handlerActions.mergeGroupsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield currentWindow.mergeGroups(targetWindow);\n      return handlerActions.mergeGroupsRes({});\n    }));\n  });\n}\n\nexports.mergeGroups = mergeGroups;\n\nfunction minimize(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.minimizeRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.minimize();\n      return handlerActions.minimizeRes({});\n    }));\n  });\n}\n\nexports.minimize = minimize;\n\nfunction moveBy(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload6 = action.payload,\n          deltaLeft = _action$payload6.deltaLeft,\n          deltaTop = _action$payload6.deltaTop;\n    return wrapAsyncFun_1.default(action, handlerActions.moveByRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.moveBy(deltaLeft, deltaTop);\n      return handlerActions.moveByRes({});\n    }));\n  });\n}\n\nexports.moveBy = moveBy;\n\nfunction moveTo(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload7 = action.payload,\n          left = _action$payload7.left,\n          top = _action$payload7.top;\n    return wrapAsyncFun_1.default(action, handlerActions.moveToRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.moveTo(left, top);\n      return handlerActions.moveToRes({});\n    }));\n  });\n}\n\nexports.moveTo = moveTo;\n\nfunction restore(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.restoreRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.restore();\n      return handlerActions.restoreRes({});\n    }));\n  });\n}\n\nexports.restore = restore;\n\nfunction show(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.showRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.show();\n      return handlerActions.showRes({});\n    }));\n  });\n}\n\nexports.show = show;\n\nfunction setAsForeground(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return wrapAsyncFun_1.default(action, handlerActions.setAsForegroundRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.setAsForeground();\n      return handlerActions.setAsForegroundRes({});\n    }));\n  });\n}\n\nexports.setAsForeground = setAsForeground;\n\nfunction setBounds(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const _action$payload8 = action.payload,\n          top = _action$payload8.top,\n          left = _action$payload8.left,\n          height = _action$payload8.height,\n          width = _action$payload8.width;\n    return wrapAsyncFun_1.default(action, handlerActions.setBoundsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.setBounds({\n        left,\n        top,\n        width,\n        height\n      });\n      return handlerActions.setBoundsRes({});\n    }));\n  });\n}\n\nexports.setBounds = setBounds;\n\nfunction updateOptions(action) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = action.payload.options;\n    return wrapAsyncFun_1.default(action, handlerActions.updateOptionsRes, fin => __awaiter(this, void 0, void 0, function* () {\n      yield init_1.initState.currentWindow.updateOptions(options);\n      return handlerActions.updateOptionsRes({});\n    }));\n  });\n}\n\nexports.updateOptions = updateOptions;","map":null,"metadata":{},"sourceType":"script"}