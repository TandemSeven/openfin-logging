{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constant_1 = require(\"../constant\");\n\nvar Base_1 = require(\"./Base\");\n\nvar System = function (_super) {\n  __extends(System, _super);\n\n  function System() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  System.getVersion = function (success, error) {\n    success(constant_1.VERSION);\n  };\n\n  System.getHostSpecs = function (success, error) {\n    var OSName = \"Unknown OS\";\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n    if (navigator.appVersion.indexOf(\"Win\") != -1) OSName = \"Windows\";\n    if (navigator.appVersion.indexOf(\"Mac\") != -1) OSName = \"MacOS\";\n    if (navigator.appVersion.indexOf(\"X11\") != -1) OSName = \"UNIX\";\n    if (navigator.appVersion.indexOf(\"Linux\") != -1) OSName = \"Linux\";\n\n    if ((verOffset = nAgt.indexOf(\"Opera\")) != -1) {\n      browserName = \"Opera\";\n      fullVersion = nAgt.substring(verOffset + 6);\n\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1) {\n        fullVersion = nAgt.substring(verOffset + 8);\n      }\n    } else if ((verOffset = nAgt.indexOf(\"MSIE\")) != -1) {\n      browserName = \"Microsoft Internet Explorer\";\n      fullVersion = nAgt.substring(verOffset + 5);\n    } else if ((verOffset = nAgt.indexOf(\"Chrome\")) != -1) {\n      browserName = \"Chrome\";\n      fullVersion = nAgt.substring(verOffset + 7);\n    } else if ((verOffset = nAgt.indexOf(\"Safari\")) != -1) {\n      browserName = \"Safari\";\n      fullVersion = nAgt.substring(verOffset + 7);\n\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1) {\n        fullVersion = nAgt.substring(verOffset + 8);\n      }\n    } else if ((verOffset = nAgt.indexOf(\"Firefox\")) != -1) {\n      browserName = \"Firefox\";\n      fullVersion = nAgt.substring(verOffset + 8);\n    }\n\n    success({\n      OSName: OSName,\n      browserName: browserName,\n      fullVersion: fullVersion,\n      appVersion: navigator.appVersion\n    });\n  };\n\n  System.getMonitorInfo = function (success, error) {\n    success({\n      primaryMonitor: {\n        monitorRect: {\n          bottom: screen.height,\n          left: 0,\n          right: screen.width,\n          top: 0\n        },\n        availableRect: {\n          bottom: screen.height,\n          left: 0,\n          right: screen.width,\n          top: 0\n        }\n      },\n      nonPrimaryMonitors: []\n    });\n  };\n\n  System.launchExternalProcess = function (options, success, error) {\n    if (error) {\n      setTimeout(function () {\n        error();\n      }, 0);\n    }\n  };\n\n  System.staticMethods = ['addEventListener', 'clearCache', 'deleteCacheOnExit', 'downloadAsset', 'downloadPreloadScripts', 'downloadRuntime', 'exit', 'flushCookieStore', 'getAllApplications', 'getAllExternalApplications', 'getAllWindows', 'getAppAssetInfo', 'getCommandLineArguments', 'getCookies', 'getCrashReporterState', 'getDeviceUserId', 'getEntityInfo', 'getEnvironmentVariable', 'getFocusedWindow', 'getLog', 'getLogList', 'getMachineId', 'getMinLogLevel', 'getMousePosition', 'getProcessList', 'getProxySettings', 'getRuntimeInfo', 'getRvmInfo', 'log', 'monitorExternalProcess', 'openUrlWithBrowser', 'readRegistryValue', 'registerExternalConnection', 'releaseExternalProcess', 'removeEventListener', 'setMinLogLevel', 'showDeveloperTools', 'startCrashReporter', 'terminateExternalProcess', 'updateProxySettings'];\n  System.instanceMethods = [];\n  return System;\n}(Base_1.BaseApiClass);\n\nexports.System = System;","map":null,"metadata":{},"sourceType":"script"}