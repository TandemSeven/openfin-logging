{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst redux_openfin_1 = require(\"redux-openfin\");\n\nconst GlobalTypes_1 = require(\"../GlobalTypes\");\n\nconst context_1 = require(\"../reduxs/application/context\");\n\nconst reduxs_1 = require(\"../reduxs\");\n\nconst ApplicationCtxProivder = ({\n  children,\n  state,\n  actions\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(context_1.ApplicationContextProvider, {\n    value: {\n      state,\n      actions\n    }\n  }, children));\n};\n\nexports.default = react_redux_1.connect(state => ({\n  state: state.application\n}), dispatch => ({\n  actions: {\n    launchNewWin: appJson => {\n      dispatch(reduxs_1.applicationLaunchNewWindow(appJson));\n    },\n    onSetLoadingMsg: label => {\n      dispatch(reduxs_1.applicationSetLoadingMsg(label));\n    },\n    onApplicationStart: () => {\n      dispatch(reduxs_1.applicationStart());\n    },\n    onApplicationReady: readyConfig => {\n      dispatch(reduxs_1.applicationReady(readyConfig));\n    },\n    onChildWinStart: () => {\n      dispatch(reduxs_1.applicationChildStart());\n    },\n    onChildWinReady: readyConfig => {\n      dispatch(reduxs_1.applicationChildReady(readyConfig));\n    },\n    onNotificationStart: () => {\n      dispatch(reduxs_1.applicationNotificationStart());\n    },\n    onNotificationReady: readyConfig => {\n      dispatch(reduxs_1.applicationNotificationReady(readyConfig));\n    },\n    onNewSnackBar: newSnackBar => {\n      dispatch(reduxs_1.applicationNewSnackbar(newSnackBar));\n    },\n    onSnackBarClose: (event, reason) => {\n      dispatch(reduxs_1.applicationCloseSnackbar(event, reason));\n    },\n    onSnackBarCloseBtnClick: () => {\n      dispatch(reduxs_1.applicationSetSnackbarStatus(false));\n    },\n    onSnackBarExited: () => {\n      dispatch(reduxs_1.applicationProcessSnackbarQueue());\n    },\n    onDrawerToggle: () => {\n      dispatch(reduxs_1.applicationDrawerToggle());\n    },\n    onLaunchBarClose: () => {\n      dispatch(reduxs_1.applicationLaunchBarClose());\n    },\n    onLaunchBarToggleCollapse: () => {\n      dispatch(reduxs_1.applicationLaunchBarToggleCollapse());\n    },\n    onLaunchBarToggle: () => {\n      dispatch(reduxs_1.applicationLaunchBarToggle());\n    },\n    onSetAsForeground: () => {\n      dispatch(redux_openfin_1.Window.actions.setAsForeground({}));\n    },\n    onUndock: () => {\n      dispatch(redux_openfin_1.Window.actions.leaveGroup({}));\n    },\n    onToggleWinState: () => {\n      dispatch(reduxs_1.applicationToggleWindowState());\n    },\n    onMinimize: () => {\n      dispatch(redux_openfin_1.Window.actions.minimize({}));\n    },\n    onWinClose: () => {\n      dispatch(redux_openfin_1.Window.actions.close({\n        force: false\n      }));\n    },\n    onWinForceClose: () => {\n      dispatch(redux_openfin_1.Window.actions.close({\n        force: true\n      }));\n    },\n    launchNewNotification: options => {\n      dispatch(redux_openfin_1.Notification.actions.createNotification(options));\n    },\n    onNotificationClose: () => {\n      dispatch(redux_openfin_1.Notification.actions.close({}));\n    }\n  }\n}), null, {\n  context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX\n})(ApplicationCtxProivder);","map":null,"metadata":{},"sourceType":"script"}