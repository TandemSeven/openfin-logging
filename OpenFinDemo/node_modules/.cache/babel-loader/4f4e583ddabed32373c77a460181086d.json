{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst channel_1 = require(\"./channel\");\n\nconst registerDefaultListener_1 = require(\"./event/registerDefaultListener\");\n\nconst init_1 = require(\"./docking/init\");\n\nvar ChannelType;\n\n(function (ChannelType) {\n  ChannelType[ChannelType[\"STANDALONE\"] = 1] = \"STANDALONE\";\n  ChannelType[ChannelType[\"PROVIDER\"] = 2] = \"PROVIDER\";\n  ChannelType[ChannelType[\"CLIENT\"] = 3] = \"CLIENT\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n\nexports.initState = {\n  fin: null,\n  store: null,\n  channel: null,\n  config: null,\n  currentWindow: null,\n  currentApplication: null\n};\nlet initialized = false;\n\nfunction init(fin, config, store) {\n  if (!initialized) {\n    channel_1.default(fin, config, store).catch(e => {\n      throw e;\n    });\n    initialized = true;\n    exports.initState.config = config;\n\n    if (store) {\n      registerDefaultListener_1.default(fin, store);\n    }\n\n    exports.initState.fin = fin;\n\n    if (fin && fin) {\n      exports.initState.currentApplication = fin.Application.getCurrentSync();\n      exports.initState.currentWindow = fin.Window.getCurrentSync();\n\n      if (config.autoDocking && config.channelType === ChannelType.PROVIDER) {\n        const dockingOptions = config.dockingOptions ? config.dockingOptions : {};\n        init_1.default(fin, exports.initState.currentWindow, dockingOptions);\n      }\n    }\n\n    if (config.ignoreStore) {\n      exports.initState.store = null;\n    } else {\n      exports.initState.store = store;\n    }\n  }\n}\n\nexports.default = init;","map":null,"metadata":{},"sourceType":"script"}