{"ast":null,"code":"/** @license Openfin browser adapter v1.0.0\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar root_1 = require(\"./root\");\n\nvar desktop_1 = require(\"./desktop\");\n\nvar OpenFinMock_1 = require(\"./OpenFinMock\");\n\nvar OpenFinMockV2_1 = require(\"./OpenFinMockV2\");\n\nvar BrowserAdapter = function () {\n  function BrowserAdapter(_a) {\n    var finUuid = _a.finUuid,\n        _b = _a.silentMode,\n        silentMode = _b === void 0 ? false : _b;\n    window.name = finUuid;\n    OpenFinMock_1.OpenFinMock.silentMode = silentMode;\n    OpenFinMockV2_1.OpenFinMockV2.silentMode = silentMode;\n    window.__openfin_browser_adapter__ = window.__openfin_browser_adapter__ || {};\n    var result = {};\n    var classes = Object.keys(desktop_1.desktop).reduce(function (acc, key) {\n      var _a;\n\n      var Klass = desktop_1.desktop[key];\n      return __assign({}, acc, (_a = {}, _a[key] = OpenFinMock_1.OpenFinMock.generateMethods(key, Klass), _a));\n    }, {});\n    this.desktop = __assign({}, result, classes);\n    var classesV2 = Object.keys(root_1.root).reduce(function (acc, key) {\n      var _a;\n\n      var Klass = root_1.root[key];\n      return __assign({}, acc, (_a = {}, _a[key] = OpenFinMockV2_1.OpenFinMockV2.generateMethods(key, Klass), _a));\n    }, {});\n\n    result.main = function (f) {\n      if (typeof f === 'function') {\n        return f();\n      }\n\n      return null;\n    };\n\n    for (var key in classesV2) {\n      this[key] = root_1.root[key];\n    }\n\n    for (var key in result) {\n      this[key] = result[key];\n    }\n  }\n\n  return BrowserAdapter;\n}();\n\nexports.BrowserAdapter = BrowserAdapter;","map":null,"metadata":{},"sourceType":"script"}