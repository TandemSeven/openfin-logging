{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"./constants\");\n\nconst handlerActionCreator_1 = require(\"../window/actions/handlerActionCreator\");\n\nconst asyncForEach_1 = require(\"../utils/asyncForEach\");\n\nfunction registerDefaultListener(fin, store) {\n  const finApplication = fin.Application.getCurrentSync();\n  const finWindow = fin.Window.getCurrentSync();\n  const dispatch = store.dispatch;\n\n  function _dispatch_getStateRes(event) {\n    if (event && event.type) {\n      if (event.type == 'maximized') {\n        dispatch(handlerActionCreator_1.getStateRes({\n          state: 'maximized'\n        }));\n      } else if (event.type == 'minimized') {\n        dispatch(handlerActionCreator_1.getStateRes({\n          state: 'minimized'\n        }));\n      } else if (event.type == 'restored') {\n        dispatch(handlerActionCreator_1.getStateRes({\n          state: 'normal'\n        }));\n      }\n    }\n  }\n\n  asyncForEach_1.default(constants_1.appEvents, oneEvent => __awaiter(this, void 0, void 0, function* () {\n    yield finApplication.addListener(oneEvent.name, event => {\n      dispatch(oneEvent.actionCreator(event));\n    });\n  }));\n  asyncForEach_1.default(constants_1.windowEvents, oneEvent => __awaiter(this, void 0, void 0, function* () {\n    const theName = oneEvent.name;\n\n    if (theName == 'maximized' || theName == 'minimized' || theName == 'restored') {\n      yield finWindow.addListener(theName, event => {\n        _dispatch_getStateRes(event);\n\n        dispatch(oneEvent.actionCreator(event));\n      });\n    } else {\n      yield finWindow.addListener(theName, event => {\n        dispatch(oneEvent.actionCreator(event));\n      });\n    }\n  }));\n}\n\nexports.default = registerDefaultListener;","map":null,"metadata":{},"sourceType":"script"}