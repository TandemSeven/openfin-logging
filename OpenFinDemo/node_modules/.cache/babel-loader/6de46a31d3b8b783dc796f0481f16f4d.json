{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst effects_1 = require(\"redux-saga/effects\");\n\nconst redux_openfin_1 = require(\"redux-openfin\");\n\nconst generalUtils_1 = require(\"../../utils/generalUtils\");\n\nconst configDao_1 = require(\"../../dexies/configDao\");\n\nconst __1 = require(\"..\");\n\nconst init_1 = require(\"../../init\");\n\nexports.LOADING_VIEW_UUID = \"\".concat(init_1.default.finUuid, \"-loading-view\");\nlet loadingWindow = null;\nexports.LAUNCHBAR_VIEW_UUID = \"\".concat(init_1.default.finUuid, \"-launchbar-view\");\nlet launchbarWindow = null;\nconst ENABLE_LOADING_VIEW = init_1.default.config.enableLoadingView;\nconst LOADING_BANNER_WIDTH = init_1.default.config.defaultLoadingBannerWidth;\nconst LOADING_BANNER_HEIGHT = init_1.default.config.defaultLoadingBannerHeight;\nconst DEFAULT_WIDTH = init_1.default.config.defaultAppWidth;\nconst DEFAULT_HEIGHT = init_1.default.config.defaultAppHeight;\n\nexports.getSnackBarOpen = state => state.application.snackBarOpen;\n\nexports.getLaunchBarCollapse = state => state.application.launchBarCollapse;\n\nexports.getWindowsState = state => state.application.windowsState;\n\nexports.getNewWindowTop = state => state.config.application.newWinTop;\n\nexports.getNewWindowLeft = state => state.config.application.newWinLeft;\n\nexports.getNewWindowWidth = state => state.config.application.newWinWidth;\n\nexports.getNewWindowHeight = state => state.config.application.newWinHeight;\n\nfunction* handleShowLoadingView(monitorRect) {\n  const WINDOW_WIDTH = monitorRect.right - monitorRect.left;\n  const WINDOW_HEIGHT = monitorRect.bottom - monitorRect.top;\n\n  const _LOADING_BANNER_WIDTH = Math.min(LOADING_BANNER_WIDTH, WINDOW_WIDTH * 0.6387);\n\n  const _LOADING_BANNER_HEIGHT = Math.min(LOADING_BANNER_HEIGHT, WINDOW_HEIGHT * 0.324074);\n\n  const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow({\n    name: exports.LOADING_VIEW_UUID,\n    url: init_1.default.config.publicUrl + '/loading',\n    frame: false,\n    resizable: false,\n    state: 'normal',\n    autoShow: true,\n    defaultCentered: true,\n    defaultLeft: (monitorRect.right - monitorRect.left) / 2 - _LOADING_BANNER_WIDTH / 2,\n    defaultTop: (monitorRect.bottom - monitorRect.top) / 2 - _LOADING_BANNER_HEIGHT / 2,\n    defaultWidth: _LOADING_BANNER_WIDTH,\n    defaultHeight: _LOADING_BANNER_HEIGHT\n  }));\n  loadingWindow = newWindowResAction.payload.window;\n  loadingWindow.setBounds({\n    left: (monitorRect.right - monitorRect.left) / 2 - _LOADING_BANNER_WIDTH / 2,\n    top: (monitorRect.bottom - monitorRect.top) / 2 - _LOADING_BANNER_HEIGHT / 2,\n    width: _LOADING_BANNER_WIDTH,\n    height: _LOADING_BANNER_HEIGHT\n  });\n  loadingWindow.bringToFront();\n}\n\nexports.handleShowLoadingView = handleShowLoadingView;\n\nfunction* handleHideFromLoadingView(monitorRect, targetUrl) {\n  // after the sagas loaded, redirect to default page/view\n  if (targetUrl && targetUrl.length > 0) {\n    init_1.default.hist.push(init_1.default.config.publicUrl + targetUrl);\n  } else if (init_1.default.config.defaultViewUrl && init_1.default.config.defaultViewUrl.length > 0) {\n    init_1.default.hist.push(init_1.default.config.publicUrl + init_1.default.config.defaultViewUrl);\n  } else {\n    init_1.default.hist.push(init_1.default.config.publicUrl + '/dashboard/view-one');\n  }\n\n  yield effects_1.delay(200);\n\n  if (loadingWindow) {\n    loadingWindow.close(true);\n  }\n\n  yield effects_1.put(redux_openfin_1.Window.actions.show({\n    force: true\n  }));\n}\n\nexports.handleHideFromLoadingView = handleHideFromLoadingView;\n\nfunction* handleApplicationLoading() {\n  const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');\n\n  if (dbSavedLang) {\n    init_1.default.i18n.changeLanguage(dbSavedLang);\n  }\n\n  const currentIsLoadingView = new URL(window.location.href).pathname.indexOf('loading') > -1 || new URL(window.location.href).pathname.indexOf('index.html') > -1;\n  const monitorInfoAction = yield effects_1.call(redux_openfin_1.System.asyncs.getMonitorInfo, redux_openfin_1.System.actions.getMonitorInfo({}));\n  const monitorRect = monitorInfoAction.payload.primaryMonitor.monitorRect;\n\n  if (ENABLE_LOADING_VIEW && currentIsLoadingView) {\n    yield* handleShowLoadingView(monitorRect);\n  }\n\n  yield effects_1.putResolve(__1.applicationSetLoadingMsg('init'));\n  yield effects_1.all([effects_1.putResolve(__1.configLoadFromDexie()), effects_1.call(redux_openfin_1.System.asyncs.getMachineId, redux_openfin_1.System.actions.getMachineId({})), // getDeviceUserId might fail, thus use flux syntax........\n  effects_1.putResolve(redux_openfin_1.System.actions.getDeviceUserId({})), effects_1.take(redux_openfin_1.System.actions.GET_DEVICE_USER_ID_RES), effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({\n    env: 'USERNAME'\n  })), effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({\n    env: 'computername'\n  })), effects_1.call(redux_openfin_1.System.asyncs.getEnvironmentVariable, redux_openfin_1.System.actions.getEnvironmentVariable({\n    env: 'HOSTNAME'\n  })), effects_1.call(redux_openfin_1.System.asyncs.getVersion, redux_openfin_1.System.actions.getVersion({})), effects_1.call(redux_openfin_1.System.asyncs.getHostSpecs, redux_openfin_1.System.actions.getHostSpecs({})), effects_1.call(redux_openfin_1.Window.asyncs.getState, redux_openfin_1.Window.actions.getState({}))]);\n  yield effects_1.putResolve(__1.applicationAwait());\n\n  const _ref = yield effects_1.race({\n    readyRes: effects_1.take(__1.APPLICATION_READY),\n    timeout: effects_1.delay(init_1.default.config.onAppAwaitDelayTime)\n  }),\n        readyRes = _ref.readyRes,\n        timeout = _ref.timeout; // console.log(\"[react-openfin]::app saga take APPLICATION_READY or time out\", readyRes, timeout);\n\n\n  const readyPayload = readyRes ? readyRes.payload : {};\n  yield effects_1.putResolve(__1.applicationSetLoadingMsg('ready'));\n  yield effects_1.putResolve(__1.applicationStarted());\n\n  if (ENABLE_LOADING_VIEW && currentIsLoadingView) {\n    yield* handleHideFromLoadingView(monitorRect, readyPayload && readyPayload.targetUrl ? readyPayload.targetUrl : void 0);\n  }\n\n  yield effects_1.put(__1.applicationSetLoadingMsg(''));\n  yield effects_1.call(redux_openfin_1.Window.asyncs.bringToFront, redux_openfin_1.Window.actions.bringToFront({}));\n}\n\nexports.handleApplicationLoading = handleApplicationLoading;\n\nfunction* handleApplicationChildLoading() {\n  const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');\n\n  if (dbSavedLang) {\n    init_1.default.i18n.changeLanguage(dbSavedLang);\n  }\n\n  yield effects_1.all([effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({})), effects_1.putResolve(__1.configLoadFromDexie())]);\n  const groupedWindowsRes = yield effects_1.call(redux_openfin_1.Window.asyncs.getGroup, redux_openfin_1.Window.actions.getGroup({}));\n  const groupedWindows = groupedWindowsRes.payload.windows;\n\n  if (groupedWindows && groupedWindows.length > 0) {\n    yield effects_1.put(__1.applicationUpdateDockStatus(true));\n  } else {\n    yield effects_1.put(__1.applicationUpdateDockStatus(false));\n  }\n\n  yield effects_1.putResolve(__1.applicationChildAwait());\n\n  const _ref2 = yield effects_1.race({\n    readyRes: effects_1.take(__1.APPLICATION_CHILD_READY),\n    timeout: effects_1.delay(init_1.default.config.onAppChildAwaitDelayTime)\n  }),\n        readyRes = _ref2.readyRes,\n        timeout = _ref2.timeout; // console.log(\"[react-openfin]::app saga take APPLICATION_CHILD_READY or time out\", readyRes, timeout);\n\n\n  const readyPayload = readyRes ? readyRes.payload : {};\n\n  if (readyPayload && readyPayload.targetUrl) {\n    init_1.default.hist.push(init_1.default.config.publicUrl + readyPayload.targetUrl);\n  }\n\n  yield effects_1.putResolve(__1.applicationChildStarted());\n}\n\nexports.handleApplicationChildLoading = handleApplicationChildLoading;\n\nfunction* handleApplicationNotificationLoading() {\n  const dbSavedLang = yield effects_1.call(configDao_1.findOneFieldVal, 'application', 'language');\n\n  if (dbSavedLang) {\n    init_1.default.i18n.changeLanguage(dbSavedLang);\n  }\n\n  yield effects_1.all([effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({})), effects_1.putResolve(__1.configLoadFromDexie())]);\n  yield effects_1.putResolve(__1.applicationNotificationAwait());\n\n  const _ref3 = yield effects_1.race({\n    readyRes: effects_1.take(__1.APPLICATION_NOTIFICATION_READY),\n    timeout: effects_1.delay(init_1.default.config.onAppNotificationAwaitDelayTime)\n  }),\n        readyRes = _ref3.readyRes,\n        timeout = _ref3.timeout; // console.log(\"[react-openfin]::app saga take APPLICATION_NOTIFICATION_READY or time out\", readyRes, timeout);\n\n\n  const readyPayload = readyRes ? readyRes.payload : {};\n\n  if (readyPayload && readyPayload.targetUrl) {\n    init_1.default.hist.push(init_1.default.config.publicUrl + readyPayload.targetUrl);\n  }\n\n  yield effects_1.putResolve(__1.applicationNotificationStarted());\n}\n\nexports.handleApplicationNotificationLoading = handleApplicationNotificationLoading;\n\nfunction* handleApplicationExit() {\n  yield effects_1.putResolve(__1.applicationCurWinClosing());\n\n  const _ref4 = yield effects_1.race({\n    readyToClose: effects_1.take(__1.APPLICATION_CUR_WIN_READY_TO_CLOSE),\n    timeout: effects_1.delay(init_1.default.config.onAppClosingAwaitDelayTime)\n  }),\n        readyToClose = _ref4.readyToClose,\n        timeout = _ref4.timeout; // console.log(\"[react-openfin]::app saga take APPLICATION_CUR_WIN_READY_TO_CLOSE or time out\", readyToClose, timeout);\n\n\n  let forceToClose = true;\n\n  if (readyToClose) {\n    console.log(\"[react-openfin]::app saga client response and ready to close\");\n    const payload = readyToClose.payload;\n\n    if (payload.skipClosing) {\n      console.log(\"[react-openfin]::app saga client response to skip closing\");\n      forceToClose = false;\n    }\n  }\n\n  if (forceToClose) {\n    yield effects_1.putResolve(redux_openfin_1.Window.actions.close({\n      force: true\n    }));\n  }\n}\n\nexports.handleApplicationExit = handleApplicationExit;\n\nfunction* handleApplicationAddNewSnackBar() {\n  const snackBarOpen = yield effects_1.select(exports.getSnackBarOpen);\n\n  if (snackBarOpen) {\n    yield effects_1.put(__1.applicationSetSnackbarStatus(false));\n  } else {\n    yield effects_1.put(__1.applicationProcessSnackbarQueue());\n  }\n}\n\nexports.handleApplicationAddNewSnackBar = handleApplicationAddNewSnackBar;\n\nfunction* handleApplicationCloseSnackBar(action) {\n  const _action$payload = action.payload,\n        event = _action$payload.event,\n        reason = _action$payload.reason;\n\n  if (reason !== 'clickaway') {\n    return;\n  } else {\n    yield effects_1.put(__1.applicationSetSnackbarStatus(false));\n  }\n}\n\nexports.handleApplicationCloseSnackBar = handleApplicationCloseSnackBar;\n\nfunction* handleToggleWindowState() {\n  const windowState = yield effects_1.select(exports.getWindowsState);\n\n  if (windowState === 'maximized') {\n    yield effects_1.call(redux_openfin_1.Window.asyncs.restore, redux_openfin_1.Window.actions.restore({}));\n  } else if (windowState === 'normal') {\n    yield effects_1.call(redux_openfin_1.Window.asyncs.maximize, redux_openfin_1.Window.actions.maximize({}));\n  }\n}\n\nexports.handleToggleWindowState = handleToggleWindowState;\n\nfunction* handleApplicationLaunchBarToggle() {\n  const launchBarCollapse = yield effects_1.select(exports.getLaunchBarCollapse);\n  const getBoundsAction = yield effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({}));\n  const getBoundsActionPayload = getBoundsAction.payload;\n  const mainWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({\n    appUuid: init_1.default.finUuid,\n    windowName: init_1.default.finUuid\n  }));\n  const mainWindow = mainWindowAction.payload.window;\n  const launchbarWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({\n    appUuid: init_1.default.finUuid,\n    windowName: exports.LAUNCHBAR_VIEW_UUID\n  }));\n  console.log('[react-openfin] application.ts#310', mainWindowAction, launchbarWindowAction);\n\n  if (window.name === exports.LAUNCHBAR_VIEW_UUID) {\n    launchbarWindow = launchbarWindowAction.payload.window;\n    mainWindow.show(true);\n    yield effects_1.put(__1.applicationLaunchBarToggled(__1.APPLICATION_LAUNCH_BAR_STATUS.SWITCH_TO_MAIN_WIN));\n    launchbarWindow.close();\n  } else {\n    launchbarWindow = null;\n    const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow({\n      name: exports.LAUNCHBAR_VIEW_UUID,\n      url: init_1.default.config.publicUrl + '/launchBar',\n      frame: false,\n      resizable: false,\n      state: 'normal',\n      autoShow: true,\n      defaultLeft: getBoundsActionPayload.left,\n      defaultTop: getBoundsActionPayload.top,\n      defaultWidth: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,\n      defaultHeight: 64,\n      minWidth: 88,\n      minHeight: 64\n    }));\n    launchbarWindow = newWindowResAction.payload.window;\n\n    if (launchBarCollapse) {\n      launchbarWindow.setBounds({\n        left: getBoundsActionPayload.left,\n        top: getBoundsActionPayload.top,\n        width: 88,\n        height: 64\n      });\n    } else {\n      launchbarWindow.setBounds({\n        left: getBoundsActionPayload.left,\n        top: getBoundsActionPayload.top,\n        width: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,\n        height: 64\n      });\n    }\n\n    launchbarWindow.bringToFront();\n    mainWindow.hide();\n    yield effects_1.put(__1.applicationLaunchBarToggled(__1.APPLICATION_LAUNCH_BAR_STATUS.SWITCH_TO_LAUNCHBAR));\n  }\n}\n\nexports.handleApplicationLaunchBarToggle = handleApplicationLaunchBarToggle;\n\nfunction* handleApplicationLaunchBarToggleCollapse() {\n  const launchBarCollapse = yield effects_1.select(exports.getLaunchBarCollapse);\n  const getBoundsAction = yield effects_1.call(redux_openfin_1.Window.asyncs.getBounds, redux_openfin_1.Window.actions.getBounds({}));\n  const getBoundsActionPayload = getBoundsAction.payload;\n\n  if (launchBarCollapse) {\n    yield effects_1.call(redux_openfin_1.Window.asyncs.setBounds, redux_openfin_1.Window.actions.setBounds({\n      left: getBoundsActionPayload.left,\n      top: getBoundsActionPayload.top,\n      width: 88,\n      height: 64\n    }));\n  } else {\n    yield effects_1.call(redux_openfin_1.Window.asyncs.setBounds, redux_openfin_1.Window.actions.setBounds({\n      left: getBoundsActionPayload.left,\n      top: getBoundsActionPayload.top,\n      width: generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length < 10 ? generalUtils_1.getAllShownItems(init_1.default.launchBarItems).length * 64 + 88 : 664,\n      height: 64\n    }));\n  }\n}\n\nexports.handleApplicationLaunchBarToggleCollapse = handleApplicationLaunchBarToggleCollapse;\n\nfunction* handleApplicationLaunchBarClose() {\n  const mainWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({\n    appUuid: init_1.default.finUuid,\n    windowName: init_1.default.finUuid\n  }));\n  const mainWindow = mainWindowAction.payload.window;\n  mainWindow.close(false);\n}\n\nexports.handleApplicationLaunchBarClose = handleApplicationLaunchBarClose;\n\nfunction* handleApplicationLaunchNewWindow(action) {\n  if (window.name === init_1.default.finUuid) {\n    const appJson = action.payload;\n    const windowName = appJson.name;\n    const wrapWindowAction = yield effects_1.call(redux_openfin_1.Window.asyncs.wrap, redux_openfin_1.Window.actions.wrap({\n      appUuid: init_1.default.finUuid,\n      windowName\n    }));\n\n    if (wrapWindowAction.payload && wrapWindowAction.payload.window && wrapWindowAction.payload.window.nativeWindow) {\n      // already created, not need to create anymore\n      const theWindow = wrapWindowAction.payload.window;\n      theWindow.show(true);\n      theWindow.bringToFront();\n    } else {\n      // not created, need to create one\n      const defaultWidth = yield effects_1.select(exports.getNewWindowWidth);\n      const defaultHeight = yield effects_1.select(exports.getNewWindowHeight);\n      const defaultTop = yield effects_1.select(exports.getNewWindowTop);\n      const defaultLeft = yield effects_1.select(exports.getNewWindowLeft);\n\n      if (!appJson.defaultWidth) {\n        appJson.defaultWidth = defaultWidth;\n      }\n\n      if (!appJson.defaultHeight) {\n        appJson.defaultHeight = defaultHeight;\n      }\n\n      if (!appJson.defaultTop) {\n        appJson.defaultTop = defaultTop;\n      }\n\n      if (!appJson.defaultLeft) {\n        appJson.defaultLeft = defaultLeft;\n      }\n\n      const newWindowResAction = yield effects_1.call(redux_openfin_1.Window.asyncs.createWindow, redux_openfin_1.Window.actions.createWindow(appJson));\n      const newWindow = newWindowResAction.payload.window;\n      newWindow.bringToFront();\n      yield effects_1.put(__1.configUpdateNewWindowPosition());\n    }\n  }\n}\n\nexports.handleApplicationLaunchNewWindow = handleApplicationLaunchNewWindow;\n\nfunction* handleGroupChanged(action) {\n  const _action$payload2 = action.payload,\n        sourceWindowName = _action$payload2.sourceWindowName,\n        targetWindowName = _action$payload2.targetWindowName,\n        memeberOf = _action$payload2.memeberOf,\n        reason = _action$payload2.reason;\n\n  if (reason === redux_openfin_1.Docking.types.GroupEventReason.JOIN) {\n    if (sourceWindowName === window.name) {\n      yield effects_1.put(__1.applicationNewSnackbar({\n        message: 'Joined group',\n        variant: 'primary'\n      }));\n    } else if (targetWindowName === window.name) {\n      yield effects_1.put(__1.applicationNewSnackbar({\n        message: 'Been joined',\n        variant: 'rose'\n      }));\n    }\n  } else if (reason === redux_openfin_1.Docking.types.GroupEventReason.LEAVE && sourceWindowName === window.name) {\n    yield effects_1.put(__1.applicationNewSnackbar({\n      message: 'Left group',\n      variant: 'primary'\n    }));\n  } else if (reason === redux_openfin_1.Docking.types.GroupEventReason.DISBAND && sourceWindowName === window.name) {\n    yield effects_1.put(__1.applicationNewSnackbar({\n      message: 'Got disbanded',\n      variant: 'rose'\n    }));\n  }\n}\n\nexports.handleGroupChanged = handleGroupChanged;\n\nfunction* default_1() {\n  yield effects_1.takeLatest(__1.APPLICATION_START, handleApplicationLoading);\n  yield effects_1.takeLatest(__1.APPLICATION_CHILD_START, handleApplicationChildLoading);\n  yield effects_1.takeLatest(__1.APPLICATION_NOTIFICATION_START, handleApplicationNotificationLoading);\n  yield effects_1.takeLatest(redux_openfin_1.Event.actionDicts.windowEventDictByName['close-requested'].type, handleApplicationExit);\n  yield effects_1.takeLatest(__1.APPLICATION_TOGGLE_WINDOW_STATE, handleToggleWindowState);\n  yield effects_1.takeLatest(__1.APPLICATION_NEW_SNACKBAR, handleApplicationAddNewSnackBar);\n  yield effects_1.takeLatest(__1.APPLICATION_CLOSE_SNACKBAR, handleApplicationCloseSnackBar);\n  yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_TOGGLE, handleApplicationLaunchBarToggle);\n  yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_TOGGLE_COLLAPSE, handleApplicationLaunchBarToggleCollapse);\n  yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_BAR_CLOSE, handleApplicationLaunchBarClose);\n  yield effects_1.takeLatest(__1.APPLICATION_LAUNCH_NEW_WINDOW, handleApplicationLaunchNewWindow);\n  yield effects_1.takeEvery(redux_openfin_1.Event.actionDicts.windowEventDictByName['group-changed'].type, handleGroupChanged);\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}