{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GlobalTypes_1 = require(\"./GlobalTypes\");\n\nconst ApplicationActions = require(\"./application/actions/actionTypes\");\n\nconst ApplicationHandlers = require(\"./application/handlers\");\n\nconst InterApplicationActions = require(\"./interApplicationBus/actions/actionTypes\");\n\nconst InterApplicationHandlers = require(\"./interApplicationBus/handlers\");\n\nconst NotificationActions = require(\"./notification/actions/actionTypes\");\n\nconst NotificationHandlers = require(\"./notification/handlers\");\n\nconst SystemActions = require(\"./system/actions/actionTypes\");\n\nconst SystemHandlers = require(\"./system/handlers\");\n\nconst WindowActions = require(\"./window/actions/actionTypes\");\n\nconst WindowHandlers = require(\"./window/handlers\");\n\nconst init_1 = require(\"./init\");\n\nconst channel_1 = require(\"./channel\");\n\nconst actionHandlers = {\n  [ApplicationActions.START_APPLICATION]: ApplicationHandlers.startApplicatoinHandler,\n  [ApplicationActions.APPLICATION_GET_CURRENT]: ApplicationHandlers.getCurrentHandler,\n  [ApplicationActions.APPLICATION_GET_WINDOW]: ApplicationHandlers.getWindowHandler,\n  [ApplicationActions.APPLICATION_WRAP]: ApplicationHandlers.wrapHandler,\n  [ApplicationActions.APPLICATION_ADD_LISTENER]: ApplicationHandlers.addListenerHandler,\n  [ApplicationActions.APPLICATION_QUIT]: ApplicationHandlers.quitHandler,\n  [ApplicationActions.APPLICATION_GET_CHILD_WINDOWS]: ApplicationHandlers.getChildWindowsHandler,\n  [ApplicationActions.APPLICATION_GET_INFO]: ApplicationHandlers.getInfoHandler,\n  [ApplicationActions.APPLICATION_GET_SHORTCUTS]: ApplicationHandlers.getShortcutsHandler,\n  [ApplicationActions.APPLICATION_GET_TRAY_ICON_INFO]: ApplicationHandlers.getTrayIconInfoHandler,\n  [ApplicationActions.APPLICATION_GET_ZOOM_LEVEL]: ApplicationHandlers.getZoomLevelHandler,\n  [ApplicationActions.APPLICATION_IS_RUNNING]: ApplicationHandlers.isRunningHandler,\n  [ApplicationActions.APPLICATION_REMOVE_LISTENER]: ApplicationHandlers.removeListenerHandler,\n  [ApplicationActions.RESTART]: ApplicationHandlers.restartHandler,\n  [ApplicationActions.APPLICATION_SCHEDULE_RESTART]: ApplicationHandlers.scheduleRestartHandler,\n  [ApplicationActions.APPLICATION_SET_SHORTCUTS]: ApplicationHandlers.setShortcutsHandler,\n  [ApplicationActions.APPLICATION_SET_TRAY_ICON]: ApplicationHandlers.setTrayIconHandler,\n  [ApplicationActions.APPLICATION_SET_ZOOM_LEVEL]: ApplicationHandlers.setZoomLevelHandler,\n  [ApplicationActions.APPLICATION_TERMINATE]: ApplicationHandlers.terminateHandler,\n  [InterApplicationActions.PUBLISH]: InterApplicationHandlers.publishHandler,\n  [InterApplicationActions.SUBSCRIBE]: InterApplicationHandlers.subscribeHandler,\n  [NotificationActions.CREATE_NOTIFICATION]: NotificationHandlers.createNotificationHandler,\n  [NotificationActions.NOTIFICATION_GET_CURRENT]: NotificationHandlers.getCurrentHandler,\n  [NotificationActions.NOTIFICATION_CLOSE]: NotificationHandlers.closeHandler,\n  [NotificationActions.NOTIFICATION_SEND_MSG]: NotificationHandlers.sendMessageHandler,\n  [NotificationActions.NOTIFICATION_SEND_MSG_TO_APP]: NotificationHandlers.sendMessageToApplicationHandler,\n  [SystemActions.GET_MACHINE_ID]: SystemHandlers.getMachineIdHandler,\n  [SystemActions.GET_DEVICE_USER_ID]: SystemHandlers.getDeviceUserIdHandler,\n  [SystemActions.GET_MONITOR_INFO]: SystemHandlers.getMonitorInfoHandler,\n  [SystemActions.GET_VERSION]: SystemHandlers.getVersionHandler,\n  [SystemActions.GET_HOST_SPECS]: SystemHandlers.getHostSpecsHandler,\n  [SystemActions.GET_ENVIRONMENT_VARIABLE]: SystemHandlers.getEnvironmentVariableHandler,\n  [SystemActions.CLEAR_CACHE]: SystemHandlers.clearCacheHandler,\n  [WindowActions.GET_CURRENT]: WindowHandlers.getCurrentHandler,\n  [WindowActions.WRAP]: WindowHandlers.wrapHandler,\n  [WindowActions.ADD_LISTENER]: WindowHandlers.addListenerHandler,\n  [WindowActions.AUTHENTICATE]: WindowHandlers.authenticateHandler,\n  [WindowActions.BRING_TO_FRONT]: WindowHandlers.bringToFrontHandler,\n  [WindowActions.CREATE_WINDOW]: WindowHandlers.createWindowHandler,\n  [WindowActions.CLOSE]: WindowHandlers.closeHandler,\n  [WindowActions.DISABLE_USER_MOVEMENT]: WindowHandlers.disableUserMovementHandler,\n  [WindowActions.ENABLE_USER_MOVEMENT]: WindowHandlers.enableUserMovementHandler,\n  [WindowActions.FOCUS]: WindowHandlers.focusHandler,\n  [WindowActions.GET_GROUP]: WindowHandlers.getGroupHandler,\n  [WindowActions.GET_BOUNDS]: WindowHandlers.getBoundsHandler,\n  [WindowActions.GET_STATE]: WindowHandlers.getStateHandler,\n  [WindowActions.GET_OPTIONS]: WindowHandlers.getOptionsHandler,\n  [WindowActions.HIDE]: WindowHandlers.hideHandler,\n  [WindowActions.JOIN_GROUP]: WindowHandlers.joinGroupHandler,\n  [WindowActions.LEAVE_GROUP]: WindowHandlers.leaveGroupHandler,\n  [WindowActions.MINIMIZE]: WindowHandlers.minimizeHandler,\n  [WindowActions.MAXIMIZE]: WindowHandlers.maximizeHandler,\n  [WindowActions.MERGE_GROUPS]: WindowHandlers.mergeGroupsHandler,\n  [WindowActions.MOVE_BY]: WindowHandlers.moveByHandler,\n  [WindowActions.MOVE_TO]: WindowHandlers.moveToHandler,\n  [WindowActions.RESTORE]: WindowHandlers.restoreHandler,\n  [WindowActions.SHOW]: WindowHandlers.showHandler,\n  [WindowActions.SET_AS_FOREGROUND]: WindowHandlers.setAsForegroundHandler,\n  [WindowActions.SET_BOUNDS]: WindowHandlers.setBoundsHandler,\n  [WindowActions.UPDATE_OPTIONS]: WindowHandlers.updateOptionsHandler\n};\n\nfunction middlewareCreator(fin, config) {\n  return store => {\n    init_1.default(fin, config, store);\n    const libDispatchFieldName = config.libDispatchFieldName ? config.libDispatchFieldName : void 0;\n    return next => action => {\n      if (libDispatchFieldName) {\n        action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME] = libDispatchFieldName;\n      }\n\n      const actionHanlderParams = {\n        fin,\n        store,\n        next,\n        action\n      };\n      const handler = actionHandlers[action.type];\n\n      if (handler) {\n        handler(actionHanlderParams);\n      } else if (channel_1.sharedActionDict.has(action.type)) {\n        channel_1.sharedActionHandler(action);\n        return next(action);\n      } else {\n        return next(action);\n      }\n    };\n  };\n}\n\nexports.middlewareCreator = middlewareCreator;","map":null,"metadata":{},"sourceType":"script"}