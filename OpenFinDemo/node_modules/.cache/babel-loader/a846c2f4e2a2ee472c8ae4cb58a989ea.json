{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst react_1 = require(\"react\");\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst GlobalTypes_1 = require(\"./GlobalTypes\");\n\nconst configureStore_1 = require(\"./utils/configureStore\");\n\nconst reduxs_1 = require(\"./reduxs\");\n\nconst init_1 = require(\"./init\");\n\nconst ApplicationCtxProvider_1 = require(\"./providers/ApplicationCtxProvider\");\n\nconst ConfigCtxProvider_1 = require(\"./providers/ConfigCtxProvider\");\n\nconst ReactOpenfinProvider = ({\n  children\n}) => {\n  const seed = react_1.useMemo(() => {\n    // init store\n    const store = configureStore_1.default(init_1.default.fin, init_1.default.finUuid, init_1.default.sharedActions, init_1.default.config.enableAutoDocking, init_1.default.dockingOptions, window.name == init_1.default.finUuid ? void 0 : window.opener[GlobalTypes_1.REACT_OPENFIN_STORE].getState());\n    window[GlobalTypes_1.REACT_OPENFIN_STORE] = store;\n    window[GlobalTypes_1.REACT_OPENFIN_DISPATCH_FIELD_NAME] = store.dispatch;\n    window.addEventListener('online', () => {\n      store.dispatch(reduxs_1.applicationNetworkOnline());\n    });\n    window.addEventListener('offline', () => {\n      store.dispatch(reduxs_1.applicationNetworkOffline());\n    });\n    init_1.default.seed = store;\n    return store;\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(react_redux_1.Provider, {\n    store: seed,\n    context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX\n  }, React.createElement(ApplicationCtxProvider_1.default, null, React.createElement(ConfigCtxProvider_1.default, null, children))));\n};\n\nexports.default = ReactOpenfinProvider;","map":null,"metadata":{},"sourceType":"script"}