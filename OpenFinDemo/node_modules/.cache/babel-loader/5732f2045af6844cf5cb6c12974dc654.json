{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst toLegacyFinWindow_1 = require(\"../utils/toLegacyFinWindow\");\n\nconst DockingUtil_1 = require(\"./DockingUtil\");\n\nconst LocalStoragePersistence_1 = require(\"./LocalStoragePersistence\");\n\nconst DockingManager_1 = require(\"./DockingManager\");\n\nconst DOCKING_NAMESPACE_PREFIX = 'AL90_REDUX_OPENFIN_DOCKING::';\nexports.initState = {\n  monitors: [],\n  persistenceService: null,\n  options: null,\n  dockingManager: null\n};\nconst defaultDockingOptions = {\n  range: 20,\n  spacing: 0,\n  undockOffsetX: 25,\n  undockOffsetY: 25,\n  movingOpacity: 0.6,\n  snappedMovingOpacity: 0.8,\n  snappedTargetOpacity: 1,\n  dockableToOthers: true,\n  unregisterOnClose: true\n};\n\nfunction initMonitorInfo(fin) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const monitors = yield DockingUtil_1.requestMonitorInfo(fin);\n\n    for (const monitorInfo of monitors) {\n      // add to monitors array, rather than replacing the ref, in case window already initialised with ref\n      exports.initState.monitors.push(monitorInfo);\n    }\n  });\n}\n\nexports.default = (fin, mainFinWindow, dockingOptions) => {\n  const options = Object.assign(defaultDockingOptions, dockingOptions);\n  initMonitorInfo(fin);\n  options.range = DockingUtil_1.parsePositiveInt(options.range, defaultDockingOptions.range);\n  options.spacing = DockingUtil_1.parsePositiveInt(options.spacing, defaultDockingOptions.spacing);\n  options.undockOffsetX = DockingUtil_1.parsePositiveInt(options.undockOffsetX, defaultDockingOptions.undockOffsetX);\n  options.undockOffsetY = DockingUtil_1.parsePositiveInt(options.undockOffsetY, defaultDockingOptions.undockOffsetY);\n  options.movingOpacity = DockingUtil_1.parseOpacity(options.movingOpacity, defaultDockingOptions.movingOpacity);\n  options.snappedMovingOpacity = DockingUtil_1.parseOpacity(options.snappedMovingOpacity, defaultDockingOptions.snappedMovingOpacity);\n  options.snappedTargetOpacity = DockingUtil_1.parseOpacity(options.snappedTargetOpacity, defaultDockingOptions.snappedTargetOpacity);\n  exports.initState.persistenceService = new LocalStoragePersistence_1.default(DOCKING_NAMESPACE_PREFIX + DockingUtil_1.getAppId(fin));\n  exports.initState.options = options;\n  exports.initState.dockingManager = new DockingManager_1.default(options); // register global unDockAll hot key\n\n  fin.desktop.GlobalHotkey.register(\"Shift+CommandOrControl+U\", () => {\n    if (exports.initState.dockingManager) {\n      exports.initState.dockingManager.undockAll();\n    }\n  });\n  exports.initState.dockingManager.register(toLegacyFinWindow_1.default(mainFinWindow), false);\n};","map":null,"metadata":{},"sourceType":"script"}