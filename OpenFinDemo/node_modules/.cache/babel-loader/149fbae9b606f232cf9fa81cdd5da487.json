{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass LocalStoragePersistence {\n  constructor(idPrefix) {\n    this.prefix = idPrefix;\n  }\n\n  retrieveRelationshipsFor(id) {\n    const storedRelationships = JSON.parse(localStorage.getItem(this.getFullStorageKey(id)));\n    return storedRelationships || [];\n  }\n\n  removeRelationship(id1, id2) {\n    const currentPartners = this.retrieveRelationshipsFor(id1);\n    const partnerIndex = currentPartners.indexOf(id2);\n\n    if (partnerIndex === -1) {\n      return;\n    }\n\n    currentPartners.splice(partnerIndex, 1);\n\n    if (currentPartners.length > 0) {\n      localStorage.setItem(this.getFullStorageKey(id1), JSON.stringify(currentPartners));\n    } else {\n      localStorage.removeItem(this.getFullStorageKey(id1));\n    }\n  }\n\n  createRelationship(id1, id2) {\n    const partners = this.retrieveRelationshipsFor(id1);\n\n    if (partners.indexOf(id2) !== -1) {\n      return;\n    }\n\n    partners.push(id2);\n    localStorage.setItem(this.getFullStorageKey(id1), JSON.stringify(partners));\n  }\n\n  createRelationshipsBetween(id1, id2) {\n    this.createRelationship(id1, id2);\n    this.createRelationship(id2, id1);\n  }\n\n  removeAllRelationships(id) {\n    // grab existing partner windows before removing all trace of this window's persistence\n    const currentPartners = this.retrieveRelationshipsFor(id);\n    localStorage.removeItem(this.getFullStorageKey(id)); // remove all 'reverse' relationships from partners too\n\n    for (let i = 0; i < currentPartners.length; i++) {\n      this.removeRelationship(currentPartners[i], id);\n    }\n  }\n\n  getFullStorageKey(id) {\n    return \"\".concat(this.prefix, \".\").concat(id);\n  }\n\n}\n\nexports.default = LocalStoragePersistence;","map":null,"metadata":{},"sourceType":"script"}