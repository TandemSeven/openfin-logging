{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst react_1 = require(\"react\");\n\nconst react_redux_1 = require(\"react-redux\");\n\nconst init_1 = require(\"../init\");\n\nconst GlobalTypes_1 = require(\"../GlobalTypes\");\n\nconst reduxs_1 = require(\"../reduxs\");\n\nconst reducer_1 = require(\"../reduxs/config/reducer\");\n\nconst context_1 = require(\"../reduxs/config/context\");\n\nconst constant_1 = require(\"../reduxs/config/constant\");\n\nconst ConfigCtxProvider = ({\n  children,\n  config,\n  actions\n}) => {\n  // todo: consider remove configExtendCustState act if initState works\n  react_1.useEffect(() => {\n    // console.log('[react-openfin] ConfigCtxProvider:: static useEffect 0#',initState.configTabs);\n    if (init_1.default.configTabs && init_1.default.configTabs.length > 0) {\n      const customState = reducer_1.buildDefaultConfigState([...constant_1.default, ...init_1.default.configTabs]); // console.log('[react-openfin] ConfigCtxProvider::static useEffect 1#', customState);\n\n      actions.onExtendCustomState(customState);\n    }\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(context_1.ConfigContextProvider, {\n    value: {\n      config,\n      actions\n    }\n  }, children));\n};\n\nexports.default = react_redux_1.connect(state => ({\n  config: state.config,\n  theme: state.config.application.theme\n}), dispatch => ({\n  onUpdateLangField: value => {\n    dispatch(reduxs_1.configUpdateOneField('application', 'language', value));\n  },\n  onUpdateGlobalFilterString: filterString => {\n    dispatch(reduxs_1.configUpdateGlobalFilterStr(filterString));\n  },\n  onUpdateOneField: (tabName, fieldName, value) => {\n    dispatch(reduxs_1.configUpdateOneField(tabName, fieldName, value));\n  },\n  onExtendCustomState: customState => {\n    dispatch(reduxs_1.configExtendCustState(customState));\n  }\n}), (stateProps, actionsProps, ownProps) => Object.assign({}, ownProps, {\n  config: stateProps.config,\n  actions: Object.assign({}, actionsProps, {\n    onToggleThemeField: () => {\n      actionsProps.onUpdateOneField('application', 'theme', stateProps.theme === reduxs_1.MuiTheme.DARK ? reduxs_1.MuiTheme.LIGHT : reduxs_1.MuiTheme.DARK);\n    }\n  })\n}), {\n  context: GlobalTypes_1.REACT_OPENFIN_STORE_CTX\n})(ConfigCtxProvider);","map":null,"metadata":{},"sourceType":"script"}