"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Base_1 = require("./Base");
var windowRegistry_1 = require("../helper/windowRegistry");
var Window = (function (_super) {
    __extends(Window, _super);
    function Window(data) {
        var _this = _super.call(this) || this;
        var opened;
        if (data && data.url) {
            opened = window.open(data.url, '_blank');
        }
        _this.contentWindow = opened || window;
        _this.identity = {
            uuid: window.name,
            name: data.name,
        };
        windowRegistry_1.default[data.name] = _this;
        return _this;
    }
    Window.getCurrent = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._name) {
                    return [2, windowRegistry_1.default[this._name]];
                }
                else {
                    Window._name = 'current-window-name';
                    return [2, new Window({ name: Window._name })];
                }
                return [2];
            });
        });
    };
    Window.getCurrentSync = function () {
        if (this._name) {
            return windowRegistry_1.default[this._name];
        }
        else {
            Window._name = 'current-window-name';
            return new Window({ name: Window._name });
        }
    };
    Window.create = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Window(data)];
            });
        });
    };
    Window.prototype.close = function (force) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.contentWindow.close();
                return [2];
            });
        });
    };
    Window.prototype.getParentWindow = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (window.location.pathname === '/') {
                    return [2, this];
                }
                return [2];
            });
        });
    };
    Window.prototype.getBounds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = {};
                result.left = this.contentWindow.screenX;
                result.top = this.contentWindow.screenY;
                result.width = this.contentWindow.outerWidth;
                result.height = this.contentWindow.outerHeight;
                return [2, result];
            });
        });
    };
    Window._name = null;
    Window.staticMethods = [
        'wrap',
    ];
    Window.staticSyncMethods = [
        'getCurrentSync',
        'wrapSync'
    ];
    Window.instanceMethods = [
        'addListener',
        'animate',
        'authenticate',
        'blur',
        'bringToFront',
        'disableUserMovement',
        'enableUserMovement',
        'executeJavaScript',
        'flash',
        'focus',
        'getAllFrames',
        'getGroup',
        'getInfo',
        'getNativeId',
        'getOptions',
        'getParentApplication',
        'getState',
        'getWebWindow',
        'getZoomLevel',
        'hide',
        'isMainWindow',
        'isShowing',
        'joinGroup',
        'leaveGroup',
        'maximize',
        'mergeGroups',
        'minimize',
        'moveBy',
        'moveTo',
        'navigate',
        'navigateBack',
        'navigateForward',
        'on',
        'once',
        'prependListener',
        'prependOnceListener',
        'reload',
        'removeAllListeners',
        'removeListener',
        'resizeBy',
        'resizeTo',
        'restore',
        'setAsForeground',
        'setBounds',
        'setZoomLevel',
        'show',
        'showAt',
        'showDeveloperTools',
        'stopFlashing',
        'stopNavigation',
        'updateOptions',
    ];
    return Window;
}(Base_1.BaseApiClass));
exports.Window = Window;
