"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var constant_1 = require("../constant");
var Base_1 = require("./Base");
var System = (function (_super) {
    __extends(System, _super);
    function System() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    System.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, constant_1.VERSION];
            });
        });
    };
    System.getHostSpecs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var OSName, nVer, nAgt, browserName, fullVersion, majorVersion, nameOffset, verOffset, ix;
            return __generator(this, function (_a) {
                OSName = "Unknown OS";
                nVer = navigator.appVersion;
                nAgt = navigator.userAgent;
                browserName = navigator.appName;
                fullVersion = '' + parseFloat(navigator.appVersion);
                majorVersion = parseInt(navigator.appVersion, 10);
                if (navigator.appVersion.indexOf("Win") != -1)
                    OSName = "Windows";
                if (navigator.appVersion.indexOf("Mac") != -1)
                    OSName = "MacOS";
                if (navigator.appVersion.indexOf("X11") != -1)
                    OSName = "UNIX";
                if (navigator.appVersion.indexOf("Linux") != -1)
                    OSName = "Linux";
                if ((verOffset = nAgt.indexOf("Opera")) != -1) {
                    browserName = "Opera";
                    fullVersion = nAgt.substring(verOffset + 6);
                    if ((verOffset = nAgt.indexOf("Version")) != -1) {
                        fullVersion = nAgt.substring(verOffset + 8);
                    }
                }
                else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
                    browserName = "Microsoft Internet Explorer";
                    fullVersion = nAgt.substring(verOffset + 5);
                }
                else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
                    browserName = "Chrome";
                    fullVersion = nAgt.substring(verOffset + 7);
                }
                else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
                    browserName = "Safari";
                    fullVersion = nAgt.substring(verOffset + 7);
                    if ((verOffset = nAgt.indexOf("Version")) != -1) {
                        fullVersion = nAgt.substring(verOffset + 8);
                    }
                }
                else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
                    browserName = "Firefox";
                    fullVersion = nAgt.substring(verOffset + 8);
                }
                return [2, { OSName: OSName, browserName: browserName, fullVersion: fullVersion, appVersion: navigator.appVersion }];
            });
        });
    };
    System.getMonitorInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, {
                        primaryMonitor: {
                            monitorRect: {
                                bottom: screen.height,
                                left: 0,
                                right: screen.width,
                                top: 0,
                            },
                            availableRect: {
                                bottom: screen.height,
                                left: 0,
                                right: screen.width,
                                top: 0,
                            }
                        },
                        nonPrimaryMonitors: [],
                    }];
            });
        });
    };
    System.launchExternalProcess = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    System.staticMethods = [
        'addListener',
        'clearCache',
        'deleteCacheOnExit',
        'downloadAsset',
        'downloadPreloadScripts',
        'downloadRuntime',
        'exit',
        'flushCookieStore',
        'getAllApplications',
        'getAllExternalApplications',
        'getAllWindows',
        'getAppAssetInfo',
        'getCommandLineArguments',
        'getCookies',
        'getCrashReporterState',
        'getDeviceUserId',
        'getEntityInfo',
        'getEnvironmentVariable',
        'getFocusedWindow',
        'getLog',
        'getLogList',
        'getMachineId',
        'getMinLogLevel',
        'getMonitorInfo',
        'getMousePosition',
        'getProcessList',
        'getProxySettings',
        'getRuntimeInfo',
        'getRvmInfo',
        'launchExternalProcess',
        'log',
        'monitorExternalProcess',
        'on',
        'once',
        'openUrlWithBrowser',
        'prependListener',
        'prependOnceListener',
        'readRegistryValue',
        'registerExternalConnection',
        'releaseExternalProcess',
        'removeAllListeners',
        'removeEventListener',
        'resolveUuid',
        'setMinLogLevel',
        'showDeveloperTools',
        'startCrashReporter',
        'terminateExternalProcess',
        'updateProxySettings',
    ];
    System.instanceMethods = [];
    return System;
}(Base_1.BaseApiClass));
exports.System = System;
