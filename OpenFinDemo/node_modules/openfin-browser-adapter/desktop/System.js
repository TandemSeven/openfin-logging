"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var constant_1 = require("../constant");
var Base_1 = require("./Base");
var System = (function (_super) {
    __extends(System, _super);
    function System() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    System.getVersion = function (success, error) {
        success(constant_1.VERSION);
    };
    System.getHostSpecs = function (success, error) {
        var OSName = "Unknown OS";
        var nVer = navigator.appVersion;
        var nAgt = navigator.userAgent;
        var browserName = navigator.appName;
        var fullVersion = '' + parseFloat(navigator.appVersion);
        var majorVersion = parseInt(navigator.appVersion, 10);
        var nameOffset, verOffset, ix;
        if (navigator.appVersion.indexOf("Win") != -1)
            OSName = "Windows";
        if (navigator.appVersion.indexOf("Mac") != -1)
            OSName = "MacOS";
        if (navigator.appVersion.indexOf("X11") != -1)
            OSName = "UNIX";
        if (navigator.appVersion.indexOf("Linux") != -1)
            OSName = "Linux";
        if ((verOffset = nAgt.indexOf("Opera")) != -1) {
            browserName = "Opera";
            fullVersion = nAgt.substring(verOffset + 6);
            if ((verOffset = nAgt.indexOf("Version")) != -1) {
                fullVersion = nAgt.substring(verOffset + 8);
            }
        }
        else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
            browserName = "Microsoft Internet Explorer";
            fullVersion = nAgt.substring(verOffset + 5);
        }
        else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
            browserName = "Chrome";
            fullVersion = nAgt.substring(verOffset + 7);
        }
        else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
            browserName = "Safari";
            fullVersion = nAgt.substring(verOffset + 7);
            if ((verOffset = nAgt.indexOf("Version")) != -1) {
                fullVersion = nAgt.substring(verOffset + 8);
            }
        }
        else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
            browserName = "Firefox";
            fullVersion = nAgt.substring(verOffset + 8);
        }
        success({ OSName: OSName, browserName: browserName, fullVersion: fullVersion, appVersion: navigator.appVersion });
    };
    System.getMonitorInfo = function (success, error) {
        success({
            primaryMonitor: {
                monitorRect: {
                    bottom: screen.height,
                    left: 0,
                    right: screen.width,
                    top: 0,
                },
                availableRect: {
                    bottom: screen.height,
                    left: 0,
                    right: screen.width,
                    top: 0,
                }
            },
            nonPrimaryMonitors: [],
        });
    };
    System.launchExternalProcess = function (options, success, error) {
        if (error) {
            setTimeout(function () {
                error();
            }, 0);
        }
    };
    System.staticMethods = [
        'addEventListener',
        'clearCache',
        'deleteCacheOnExit',
        'downloadAsset',
        'downloadPreloadScripts',
        'downloadRuntime',
        'exit',
        'flushCookieStore',
        'getAllApplications',
        'getAllExternalApplications',
        'getAllWindows',
        'getAppAssetInfo',
        'getCommandLineArguments',
        'getCookies',
        'getCrashReporterState',
        'getDeviceUserId',
        'getEntityInfo',
        'getEnvironmentVariable',
        'getFocusedWindow',
        'getLog',
        'getLogList',
        'getMachineId',
        'getMinLogLevel',
        'getMousePosition',
        'getProcessList',
        'getProxySettings',
        'getRuntimeInfo',
        'getRvmInfo',
        'log',
        'monitorExternalProcess',
        'openUrlWithBrowser',
        'readRegistryValue',
        'registerExternalConnection',
        'releaseExternalProcess',
        'removeEventListener',
        'setMinLogLevel',
        'showDeveloperTools',
        'startCrashReporter',
        'terminateExternalProcess',
        'updateProxySettings',
    ];
    System.instanceMethods = [];
    return System;
}(Base_1.BaseApiClass));
exports.System = System;
