"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var OpenFinMockV2 = (function () {
    function OpenFinMockV2() {
    }
    OpenFinMockV2.generateMethods = function (name, Klass) {
        var _this = this;
        var staticMethods = Klass.staticMethods || [];
        var staticSyncMethods = Klass.staticSyncMethods || [];
        var instanceMethods = Klass.instanceMethods || [];
        var instanceSyncMethods = Klass.instanceSyncMethods || [];
        var _loop_1 = function (method) {
            if (Klass[method]) {
                console.warn("[OpenFinMock] Warning! Attempt to overwrite already implemented static methods:`" + name + "." + method + "`. This method will not be overwritten. Remove this method from `" + name + ".staticMethods`.");
                return "continue";
            }
            Klass[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var argsMsg;
                    return __generator(this, function (_a) {
                        argsMsg = '';
                        if (args.length) {
                            argsMsg = "This method also received the arguments: " + JSON.stringify(args, null, 2);
                        }
                        if (!OpenFinMockV2.silentMode) {
                            console.info("[OpenFinMock] Static method `" + name + "." + method + "` not implemented. \n                        " + argsMsg + " This method will not return anything, which will probably have unintended consequence.\n                        Implement this method on the `" + name + "` class to return a value.               \n                    ");
                        }
                        return [2];
                    });
                });
            };
        };
        for (var _i = 0, staticMethods_1 = staticMethods; _i < staticMethods_1.length; _i++) {
            var method = staticMethods_1[_i];
            _loop_1(method);
        }
        var _loop_2 = function (method) {
            if (Klass[method]) {
                console.warn("[OpenFinMock] Warning! Attempt to overwrite already implemented static async methods:`" + name + "." + method + "`. This method will not be overwritten. Remove this method from `" + name + ".staticMethods`.");
                return "continue";
            }
            Klass[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var argsMsg = '';
                if (args.length) {
                    argsMsg = "This method also received the arguments: " + JSON.stringify(args, null, 2);
                }
                if (args.length > 1 && typeof args[args.length - 2] === 'function') {
                    args[args.length - 2]();
                }
                if (!OpenFinMockV2.silentMode) {
                    console.info("[OpenFinMock] Static method `" + name + "." + method + "` not implemented. \n                        " + argsMsg + " This method will not return anything, which will probably have unintended consequence.\n                        Implement this method on the `" + name + "` class to return a value.               \n                    ");
                }
            };
        };
        for (var _a = 0, staticSyncMethods_1 = staticSyncMethods; _a < staticSyncMethods_1.length; _a++) {
            var method = staticSyncMethods_1[_a];
            _loop_2(method);
        }
        var _loop_3 = function (method) {
            if (Klass.prototype[method]) {
                console.warn("[OpenFinMock] Warning! Attemp to overwrite already implemented instance method: `" + name + "#" + method + "`.\n                    This method will not be overwritten. Remove this method from `" + name + ".instanceMethods`.       \n                ");
                return "continue";
            }
            Klass.prototype[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var argsMsg;
                    return __generator(this, function (_a) {
                        argsMsg = '';
                        if (args.length) {
                            argsMsg = "This method also received the arguments: " + JSON.stringify(args, null, 2);
                        }
                        if (!OpenFinMockV2.silentMode) {
                            console.info("[OpenFinMock] Instance method `" + name + "." + method + "` not implemented. \n                        " + argsMsg + " This method will not return anything, which will probably have unintended consequence.\n                        Implement this method on the `" + name + "` class to return a value.               \n                    ");
                        }
                        return [2];
                    });
                });
            };
        };
        for (var _b = 0, instanceMethods_1 = instanceMethods; _b < instanceMethods_1.length; _b++) {
            var method = instanceMethods_1[_b];
            _loop_3(method);
        }
        var _loop_4 = function (method) {
            if (Klass.prototype[method]) {
                console.warn("[OpenFinMock] Warning! Attemp to overwrite already implemented instance method: `" + name + "#" + method + "`.\n                    This method will not be overwritten. Remove this method from `" + name + ".instanceMethods`.       \n                ");
                return "continue";
            }
            Klass.prototype[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var argsMsg;
                    return __generator(this, function (_a) {
                        argsMsg = '';
                        if (args.length) {
                            argsMsg = "This method also received the arguments: " + JSON.stringify(args, null, 2);
                        }
                        if (args.length > 1 && typeof args[args.length - 2] === 'function') {
                            args[args.length - 2]();
                        }
                        if (!OpenFinMockV2.silentMode) {
                            console.info("[OpenFinMock] Instance method `" + name + "." + method + "` not implemented. \n                        " + argsMsg + " This method will not return anything, which will probably have unintended consequence.\n                        Implement this method on the `" + name + "` class to return a value.               \n                    ");
                        }
                        return [2];
                    });
                });
            };
        };
        for (var _c = 0, instanceSyncMethods_1 = instanceSyncMethods; _c < instanceSyncMethods_1.length; _c++) {
            var method = instanceSyncMethods_1[_c];
            _loop_4(method);
        }
        return Klass;
    };
    OpenFinMockV2.silentMode = false;
    return OpenFinMockV2;
}());
exports.OpenFinMockV2 = OpenFinMockV2;
