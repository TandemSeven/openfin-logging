/** @license Openfin browser adapter v1.0.0
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var root_1 = require("./root");
var desktop_1 = require("./desktop");
var OpenFinMock_1 = require("./OpenFinMock");
var OpenFinMockV2_1 = require("./OpenFinMockV2");
var BrowserAdapter = (function () {
    function BrowserAdapter(_a) {
        var finUuid = _a.finUuid, _b = _a.silentMode, silentMode = _b === void 0 ? false : _b;
        window.name = finUuid;
        OpenFinMock_1.OpenFinMock.silentMode = silentMode;
        OpenFinMockV2_1.OpenFinMockV2.silentMode = silentMode;
        window.__openfin_browser_adapter__ = window.__openfin_browser_adapter__ || {};
        var result = {};
        var classes = Object.keys(desktop_1.desktop).reduce(function (acc, key) {
            var _a;
            var Klass = desktop_1.desktop[key];
            return __assign({}, acc, (_a = {}, _a[key] = OpenFinMock_1.OpenFinMock.generateMethods(key, Klass), _a));
        }, {});
        this.desktop = __assign({}, result, classes);
        var classesV2 = Object.keys(root_1.root).reduce(function (acc, key) {
            var _a;
            var Klass = root_1.root[key];
            return __assign({}, acc, (_a = {}, _a[key] = OpenFinMockV2_1.OpenFinMockV2.generateMethods(key, Klass), _a));
        }, {});
        result.main = function (f) {
            if (typeof f === 'function') {
                return f();
            }
            return null;
        };
        for (var key in classesV2) {
            this[key] = root_1.root[key];
        }
        for (var key in result) {
            this[key] = result[key];
        }
    }
    return BrowserAdapter;
}());
exports.BrowserAdapter = BrowserAdapter;
