"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlerActions = require("./actions/handlerActionCreator");
const wrapAsyncFun_1 = require("../utils/wrapAsyncFun");
function getMachineId(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getMachineIdRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const id = yield fin.System.getMachineId();
            return handlerActions.getMachineIdRes({ id });
        }));
    });
}
exports.getMachineId = getMachineId;
function getDeviceUserId(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getDeviceUserIdRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const id = yield fin.System.getDeviceUserId();
            return handlerActions.getDeviceUserIdRes({ id });
        }));
    });
}
exports.getDeviceUserId = getDeviceUserId;
function getMonitorInfo(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getMonitorInfoRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const monitorInfo = yield fin.System.getMonitorInfo();
            return handlerActions.getMonitorInfoRes(monitorInfo);
        }));
    });
}
exports.getMonitorInfo = getMonitorInfo;
function getVersion(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getVersionRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const version = yield fin.System.getVersion();
            return handlerActions.getVersionRes({ version });
        }));
    });
}
exports.getVersion = getVersion;
function getHostSpecs(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getHostSpecsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const info = yield fin.System.getHostSpecs();
            return handlerActions.getHostSpecsRes(info);
        }));
    });
}
exports.getHostSpecs = getHostSpecs;
function getEnvironmentVariable(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { env } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.getEnvironmentVariableRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const value = yield fin.System.getEnvironmentVariable(env);
            return handlerActions.getEnvironmentVariableRes({ env, value });
        }));
    });
}
exports.getEnvironmentVariable = getEnvironmentVariable;
function clearCache(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.clearCacheRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield fin.System.clearCache(options);
            return handlerActions.clearCacheRes({});
        }));
    });
}
exports.clearCache = clearCache;
