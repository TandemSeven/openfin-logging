"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = require("../init");
const init_2 = require("../docking/init");
const toLegacyFinWindow_1 = require("../utils/toLegacyFinWindow");
const handlerActions = require("./actions/handlerActionCreator");
const wrapAsyncFun_1 = require("../utils/wrapAsyncFun");
function getCurrent(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getCurrentRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let current;
            if (init_1.initState.currentWindow) {
                current = init_1.initState.currentWindow;
            }
            else {
                current = fin.Window.getCurrentSync();
                init_1.initState.currentWindow = current;
            }
            return handlerActions.getCurrentRes({ current });
        }));
    });
}
exports.getCurrent = getCurrent;
function wrap(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { appUuid, windowName } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.wrapRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let window = yield fin.Window.wrap({ uuid: appUuid, name: windowName });
            return handlerActions.wrapRes({ window });
        }));
    });
}
exports.wrap = wrap;
function addListener(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { type, listener, options } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.addListenerRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.addListener(type, listener, options);
            return handlerActions.addListenerRes({});
        }));
    });
}
exports.addListener = addListener;
function authenticate(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { userName, password } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.authenticateRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.authenticate(userName, password);
            return handlerActions.authenticateRes({});
        }));
    });
}
exports.authenticate = authenticate;
function bringToFront(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.bringToFrontRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.bringToFront();
            return handlerActions.bringToFrontRes({});
        }));
    });
}
exports.bringToFront = bringToFront;
function createWindow(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.createWindowRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let window = yield fin.Window.create(options);
            if (init_2.initState.dockingManager) {
                init_2.initState.dockingManager.register(toLegacyFinWindow_1.default(window));
            }
            return handlerActions.createWindowRes({ window });
        }));
    });
}
exports.createWindow = createWindow;
function close(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.closeRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.close(force);
            return handlerActions.closeRes({});
        }));
    });
}
exports.close = close;
function disableUserMovement(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.disableFrameRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.disableUserMovement();
            return handlerActions.disableFrameRes({});
        }));
    });
}
exports.disableUserMovement = disableUserMovement;
function enableUserMovement(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.enableFrameRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.enableUserMovement();
            return handlerActions.enableFrameRes({});
        }));
    });
}
exports.enableUserMovement = enableUserMovement;
function focus(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.focusRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.focus();
            return handlerActions.focusRes({});
        }));
    });
}
exports.focus = focus;
function getGroup(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getGroupRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const windows = yield init_1.initState.currentWindow.getGroup();
            return handlerActions.getGroupRes({ windows });
        }));
    });
}
exports.getGroup = getGroup;
function getBounds(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getBoundsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const payload = yield init_1.initState.currentWindow.getBounds();
            return handlerActions.getBoundsRes(payload);
        }));
    });
}
exports.getBounds = getBounds;
function getState(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getStateRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const state = yield init_1.initState.currentWindow.getState();
            return handlerActions.getStateRes({ state });
        }));
    });
}
exports.getState = getState;
function getOptions(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getOptionsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const options = yield init_1.initState.currentWindow.getOptions();
            return handlerActions.getOptionsRes(options);
        }));
    });
}
exports.getOptions = getOptions;
function hide(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.hideRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.hide();
            return handlerActions.hideRes({});
        }));
    });
}
exports.hide = hide;
function joinGroup(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { currentWindow, targetWindow } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.joinGroupRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield currentWindow.joinGroup(targetWindow);
            return handlerActions.joinGroupRes({});
        }));
    });
}
exports.joinGroup = joinGroup;
function leaveGroup(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { targetWindow } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.leaveGroupRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            if (targetWindow) {
                yield targetWindow.leaveGroup();
            }
            else {
                yield init_1.initState.currentWindow.leaveGroup();
            }
            return handlerActions.leaveGroupRes({});
        }));
    });
}
exports.leaveGroup = leaveGroup;
function maximize(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.maximizeRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.maximize();
            return handlerActions.maximizeRes({});
        }));
    });
}
exports.maximize = maximize;
function mergeGroups(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { currentWindow, targetWindow } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.mergeGroupsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield currentWindow.mergeGroups(targetWindow);
            return handlerActions.mergeGroupsRes({});
        }));
    });
}
exports.mergeGroups = mergeGroups;
function minimize(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.minimizeRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.minimize();
            return handlerActions.minimizeRes({});
        }));
    });
}
exports.minimize = minimize;
function moveBy(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { deltaLeft, deltaTop } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.moveByRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.moveBy(deltaLeft, deltaTop);
            return handlerActions.moveByRes({});
        }));
    });
}
exports.moveBy = moveBy;
function moveTo(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { left, top } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.moveToRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.moveTo(left, top);
            return handlerActions.moveToRes({});
        }));
    });
}
exports.moveTo = moveTo;
function restore(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.restoreRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.restore();
            return handlerActions.restoreRes({});
        }));
    });
}
exports.restore = restore;
function show(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.showRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.show();
            return handlerActions.showRes({});
        }));
    });
}
exports.show = show;
function setAsForeground(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.setAsForegroundRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.setAsForeground();
            return handlerActions.setAsForegroundRes({});
        }));
    });
}
exports.setAsForeground = setAsForeground;
function setBounds(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { top, left, height, width, } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.setBoundsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.setBounds({ left, top, width, height });
            return handlerActions.setBoundsRes({});
        }));
    });
}
exports.setBounds = setBounds;
function updateOptions(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { options, } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.updateOptionsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentWindow.updateOptions(options);
            return handlerActions.updateOptionsRes({});
        }));
    });
}
exports.updateOptions = updateOptions;
