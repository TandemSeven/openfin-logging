"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = require("../init");
const handlerActions = require("./actions/handlerActionCreator");
const wrapAsyncFun_1 = require("../utils/wrapAsyncFun");
/**
 * Wrappered apis of Application package
 * //https://cdn.openfin.co/docs/javascript/stable/Application.html
 */
function start(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.startApplicationRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let app = yield fin.Application.start(options);
            return handlerActions.startApplicationRes({ app });
        }));
    });
}
exports.start = start;
function getCurrent(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield wrapAsyncFun_1.default(action, handlerActions.getCurrentRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let application;
            if (init_1.initState.currentApplication) {
                application = init_1.initState.currentApplication;
            }
            else {
                application = yield fin.Application.getCurrent();
                init_1.initState.currentApplication = application;
            }
            return handlerActions.getCurrentRes({ application });
        }));
    });
}
exports.getCurrent = getCurrent;
function getWindow(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getWindowRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const mainWindow = yield init_1.initState.currentApplication.getWindow();
            return handlerActions.getWindowRes({ mainWindow });
        }));
    });
}
exports.getWindow = getWindow;
function wrap(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { uuid } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.wrapRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const application = yield fin.Application.wrap({ uuid });
            return handlerActions.wrapRes({ application });
        }));
    });
}
exports.wrap = wrap;
function addListener(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { type, listener, options } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.addListenerRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.addListener(type, listener, options);
            return handlerActions.addListenerRes({});
        }));
    });
}
exports.addListener = addListener;
function quit(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.quitRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            let application = yield fin.Application.getCurrent();
            yield application.quit(force);
            return handlerActions.quitRes({});
        }));
    });
}
exports.quit = quit;
function getChildWindows(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getChildWindowsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const children = yield init_1.initState.currentApplication.getChildWindows();
            return handlerActions.getChildWindowsRes({ children });
        }));
    });
}
exports.getChildWindows = getChildWindows;
function getInfo(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getInfoRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const info = yield init_1.initState.currentApplication.getInfo();
            return handlerActions.getInfoRes({ info });
        }));
    });
}
exports.getInfo = getInfo;
function getShortcuts(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getShortcutsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const config = yield init_1.initState.currentApplication.getShortcuts();
            return handlerActions.getShortcutsRes({ config });
        }));
    });
}
exports.getShortcuts = getShortcuts;
function getTrayIconInfo(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getTrayIconInfoRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const trayInfo = yield init_1.initState.currentApplication.getTrayIconInfo();
            return handlerActions.getTrayIconInfoRes({ trayInfo });
        }));
    });
}
exports.getTrayIconInfo = getTrayIconInfo;
function getZoomLevel(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.getZoomLevelRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const level = yield init_1.initState.currentApplication.getZoomLevel();
            return handlerActions.getZoomLevelRes({ level });
        }));
    });
}
exports.getZoomLevel = getZoomLevel;
function isRunning(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.isRunningRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            const running = yield init_1.initState.currentApplication.isRunning();
            return handlerActions.isRunningRes({ running });
        }));
    });
}
exports.isRunning = isRunning;
function removeListener(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { type, listener, options } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.removeListenerRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.removeListener(type, listener, options);
            return handlerActions.removeListenerRes({});
        }));
    });
}
exports.removeListener = removeListener;
function restart(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.restartRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.restart();
            return handlerActions.restartRes({});
        }));
    });
}
exports.restart = restart;
function scheduleRestart(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.scheduleRestartRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.scheduleRestart();
            return handlerActions.scheduleRestartRes({});
        }));
    });
}
exports.scheduleRestart = scheduleRestart;
function setShortcuts(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.setShortcutsRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.setShortcuts(config);
            return handlerActions.setShortcutsRes({});
        }));
    });
}
exports.setShortcuts = setShortcuts;
function setTrayIcon(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { iconUrl } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.setTrayIconRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.setTrayIcon(iconUrl);
            return handlerActions.setTrayIconRes({});
        }));
    });
}
exports.setTrayIcon = setTrayIcon;
function setZoomLevel(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { level } = action.payload;
        return wrapAsyncFun_1.default(action, handlerActions.setZoomLevelRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.setZoomLevel(level);
            return handlerActions.setZoomLevelRes({});
        }));
    });
}
exports.setZoomLevel = setZoomLevel;
function terminate(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return wrapAsyncFun_1.default(action, handlerActions.terminateRes, (fin) => __awaiter(this, void 0, void 0, function* () {
            yield init_1.initState.currentApplication.terminate();
            return handlerActions.terminateRes({});
        }));
    });
}
exports.terminate = terminate;
