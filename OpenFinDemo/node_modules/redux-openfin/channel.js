"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = require("./init");
exports.sharedActionDict = new Set();
exports.DEFAULT_SHARED_ACTION_CHANNEL_NAME = 'ALBERTLI90_REDUX_OPENFIN_SHARED_ACTIONS';
exports.SHARED_ACTION_ORIGIN_TAG = '_albertli90_redux_openfin_origin';
let channelType;
let channel;
let stackedChannel = [];
let channelUp = 0;
let dispatch;
// listener is response to consume the action from channel
const sharedActionListener = (type) => (action, identity) => {
    if (!('identity' in action)) {
        action['identity'] = identity;
    }
    console.log('[redux-openfin]channel::sharedActionListener', type, action, identity);
    if (channelType === init_1.ChannelType.PROVIDER) {
        channel.publish(type, action);
    }
    if (action[exports.SHARED_ACTION_ORIGIN_TAG] !== window[exports.SHARED_ACTION_ORIGIN_TAG]) {
        dispatch(action);
    }
};
// handler is response to send actions to the channel
function sharedActionHandler(action) {
    // console.log('[redux-openfin]channel::sharedActionHandler called',action,channelType,channel,stackedChannel,channelUp);
    if (!action[exports.SHARED_ACTION_ORIGIN_TAG]) {
        action[exports.SHARED_ACTION_ORIGIN_TAG] = window[exports.SHARED_ACTION_ORIGIN_TAG];
        stackedChannel.push(action);
        if (channelUp || (channel && channelType === init_1.ChannelType.CLIENT)) {
            while (stackedChannel.length) {
                let theAction = stackedChannel.shift();
                if (channelType === init_1.ChannelType.PROVIDER) {
                    console.log('[redux-openfin]channel::sharedActionHandler PROVIDER publish');
                    channel.publish(theAction.type, theAction);
                }
                else if (channelType === init_1.ChannelType.CLIENT) {
                    console.log('[redux-openfin]channel::sharedActionHandler CLIENT dispatch');
                    channel.dispatch(theAction.type, theAction).then((...args) => {
                        console.log('[redux-openfin]channel::sharedActionHandler CLIENT dispatch resolved', args);
                    }).catch(e => { throw e; });
                }
            }
        }
    }
}
exports.sharedActionHandler = sharedActionHandler;
exports.default = (fin, config, store) => __awaiter(this, void 0, void 0, function* () {
    if (!config.channelType) {
        config.channelType = window.name === config.finUuid ? init_1.ChannelType.PROVIDER : init_1.ChannelType.CLIENT;
    }
    if (config.channelType != init_1.ChannelType.STANDALONE && store) {
        const Channel = fin.InterApplicationBus.Channel;
        let ChannelName = config.channelName ? config.channelName :
            (config.channelRandomSuffix ?
                exports.DEFAULT_SHARED_ACTION_CHANNEL_NAME + '-' + new Date().getTime()
                : exports.DEFAULT_SHARED_ACTION_CHANNEL_NAME);
        dispatch = store.dispatch;
        config.sharedActions.forEach((oneAction) => {
            exports.sharedActionDict.add(oneAction);
        });
        window[exports.SHARED_ACTION_ORIGIN_TAG] = config.channelClientId ? config.channelClientId : window.name;
        Channel.onChannelConnect(() => {
            channelUp++;
            // console.log('[redux-openfin]channel::onChannelConnect',channelUp);
        });
        Channel.onChannelDisconnect(() => {
            channelUp--;
            // console.log('[redux-openfin]channel::onChannelDisconnect',channelUp);
        });
        channelType = config.channelType;
        if (config.channelType === init_1.ChannelType.PROVIDER) {
            try {
                channel = yield Channel.create(ChannelName);
            }
            catch (e) {
                // console.error('[redux-openfin]channel::default',e);
                ChannelName = ChannelName + '-' + new Date().getTime();
                channel = yield Channel.create(ChannelName);
                console.log(`[redux-openfin] Duplicate channel name found and use ${ChannelName} instead`);
            }
            init_1.initState.channel = channel;
            window._albertli90_redux_openfin_channelname = ChannelName;
        }
        else if (config.channelType === init_1.ChannelType.CLIENT) {
            if (window.opener._albertli90_redux_openfin_channelname) {
                channel = yield Channel.connect(window.opener._albertli90_redux_openfin_channelname, { wait: true });
            }
            else {
                channel = yield Channel.connect(ChannelName, { wait: true });
            }
            init_1.initState.channel = channel;
        }
        config.sharedActions.forEach((oneAction) => {
            channel.register(oneAction, sharedActionListener(oneAction));
        });
        // channelConfig = config;
    }
});
