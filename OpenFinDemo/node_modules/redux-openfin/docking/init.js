"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const toLegacyFinWindow_1 = require("../utils/toLegacyFinWindow");
const DockingUtil_1 = require("./DockingUtil");
const LocalStoragePersistence_1 = require("./LocalStoragePersistence");
const DockingManager_1 = require("./DockingManager");
const DOCKING_NAMESPACE_PREFIX = 'AL90_REDUX_OPENFIN_DOCKING::';
exports.initState = {
    monitors: [],
    persistenceService: null,
    options: null,
    dockingManager: null,
};
const defaultDockingOptions = {
    range: 20,
    spacing: 0,
    undockOffsetX: 25,
    undockOffsetY: 25,
    movingOpacity: 0.6,
    snappedMovingOpacity: 0.8,
    snappedTargetOpacity: 1,
    dockableToOthers: true,
    unregisterOnClose: true,
};
function initMonitorInfo(fin) {
    return __awaiter(this, void 0, void 0, function* () {
        const monitors = yield DockingUtil_1.requestMonitorInfo(fin);
        for (const monitorInfo of monitors) {
            // add to monitors array, rather than replacing the ref, in case window already initialised with ref
            exports.initState.monitors.push(monitorInfo);
        }
    });
}
exports.default = (fin, mainFinWindow, dockingOptions) => {
    const options = Object.assign(defaultDockingOptions, dockingOptions);
    initMonitorInfo(fin);
    options.range = DockingUtil_1.parsePositiveInt(options.range, defaultDockingOptions.range);
    options.spacing = DockingUtil_1.parsePositiveInt(options.spacing, defaultDockingOptions.spacing);
    options.undockOffsetX = DockingUtil_1.parsePositiveInt(options.undockOffsetX, defaultDockingOptions.undockOffsetX);
    options.undockOffsetY = DockingUtil_1.parsePositiveInt(options.undockOffsetY, defaultDockingOptions.undockOffsetY);
    options.movingOpacity = DockingUtil_1.parseOpacity(options.movingOpacity, defaultDockingOptions.movingOpacity);
    options.snappedMovingOpacity = DockingUtil_1.parseOpacity(options.snappedMovingOpacity, defaultDockingOptions.snappedMovingOpacity);
    options.snappedTargetOpacity = DockingUtil_1.parseOpacity(options.snappedTargetOpacity, defaultDockingOptions.snappedTargetOpacity);
    exports.initState.persistenceService = new LocalStoragePersistence_1.default(DOCKING_NAMESPACE_PREFIX + DockingUtil_1.getAppId(fin));
    exports.initState.options = options;
    exports.initState.dockingManager = new DockingManager_1.default(options);
    // register global unDockAll hot key
    fin.desktop.GlobalHotkey.register("Shift+CommandOrControl+U", () => {
        if (exports.initState.dockingManager) {
            exports.initState.dockingManager.undockAll();
        }
    });
    exports.initState.dockingManager.register(toLegacyFinWindow_1.default(mainFinWindow), false);
};
