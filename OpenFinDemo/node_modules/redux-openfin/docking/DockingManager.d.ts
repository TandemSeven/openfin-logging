import { LegacyFinWindow } from '../GlobalTypes';
import DockingWindow, { DockingWindowOnCloseEvent, DockingWindowOnMoveEvent } from './DockingWindow';
import { IDockingOptions } from './DockingType';
export default class DockingManager implements IDockingOptions {
    dockableToOthers: boolean;
    movingOpacity: number;
    range: number;
    snappedMovingOpacity: number;
    snappedTargetOpacity: number;
    spacing: number;
    undockOffsetX: number;
    undockOffsetY: number;
    unregisterOnClose: boolean;
    windows: DockingWindow[];
    snappedWindows: {
        [key: string]: [DockingWindow, DockingWindow];
    };
    constructor(dockingOptions: IDockingOptions);
    register: (window: LegacyFinWindow, dockableToOthers?: boolean) => void;
    unregister: (window: DockingWindow) => void;
    unregisterByName: (windowName: string) => void;
    undockAll: () => void;
    handleWindowClose: (event: DockingWindowOnCloseEvent) => void;
    bringWindowOrGroupToFront: (dockingWindow: DockingWindow) => void;
    handleWindowRestore: (dockingWindow: DockingWindow) => void;
    handleWindowMinimize: (dockingWindow: DockingWindow) => void;
    handleWindowMove: (event: DockingWindowOnMoveEvent) => void;
    dockAllSnappedWindows: () => void;
    undockWindow: (windowName: string) => void;
    addWindowToTheGroup: (snappedWindow: DockingWindow, groupedWindow: DockingWindow) => void;
    checkIfStillSnapped: () => void;
    addToSnapList: (window1: DockingWindow, window2: DockingWindow) => void;
    removeFromSnapList: (window1: DockingWindow, window2: DockingWindow) => void;
}
