import { LegacyFinWindow, WindowOptions } from '../GlobalTypes';
import { IRectangle, IDockingOptions } from './DockingType';
import DockingGroup from './DockingGroup';
export declare type DockingWindowOnMoveEvent = {
    target: DockingWindow;
    preventDefault: boolean;
    bounds: {
        x: number;
        y: number;
        width: number;
        height: number;
        changedWidth: number;
        changedHeight: number;
    };
};
export declare type DockingWindowOnCloseEvent = {
    target: DockingWindow;
};
export default class DockingWindow implements IRectangle, IDockingOptions {
    static getWindowByName(windowList: DockingWindow[], windowName: string): DockingWindow;
    name: string;
    range: number;
    spacing: number;
    undockOffsetX: number;
    undockOffsetY: number;
    x: number;
    y: number;
    width: number;
    height: number;
    currentRange: number;
    originalOpacity: number;
    movingOpacity: number;
    snappedMovingOpacity: number;
    snappedTargetOpacity: number;
    acceptDockingConnection: boolean;
    dockableToOthers: boolean;
    unregisterOnClose: boolean;
    minimized: boolean;
    openfinWindow: LegacyFinWindow;
    group: DockingGroup;
    constructor(finWindow: LegacyFinWindow, options: IDockingOptions);
    onMove: (event: DockingWindowOnMoveEvent) => void;
    onMoveComplete: (...args: any[]) => void;
    onFocus: (event: DockingWindow) => void;
    onRestore: (event: DockingWindow) => void;
    onMinimize: (event: DockingWindow) => void;
    onLeaveGroup: (windowName: string) => void;
    onClose: (event: DockingWindowOnCloseEvent) => void;
    hanldeWindowOptions: (windowOptions: WindowOptions) => void;
    handleWindowInitialized: () => void;
    completeInitialization: (initialWindowBounds: any) => void;
    handleBoundsUpdate: (bounds: any) => void;
    setOpacity: (value: any) => void;
    resetOpacity: () => void;
    minimize: () => void;
    restore: () => void;
    handleBoundsChanging: (bounds: any) => void;
    moveTo: (x: number, y: number, width?: number, height?: number) => void;
    handleBoundsChanged: () => void;
    handleMoved: () => void;
    handleClosed: () => void;
    handleFocused: () => void;
    handleMinimized: () => void;
    handleRestored: () => void;
    handleGroupChanged: (groupEvent: any) => void;
    joinDockingGroup: (snappedPartnerWindow: DockingWindow) => void;
    leaveDockingGroup: (isInitiator?: boolean) => Promise<void>;
}
