"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = require("../init");
const GlobalTypes_1 = require("../GlobalTypes");
/**
 * async wrapper for api v2
 *
 *
 * @param action
 * @param resActionCreator
 * @param finCb
 */
function wrapAsyncFun(action, resActionCreator, finCb) {
    return __awaiter(this, void 0, void 0, function* () {
        const libReduxDispatch = (action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME] && window[action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME]]) ?
            window[action[GlobalTypes_1.LIB_REDUX_DISPATCH_FIELD_NAME]] :
            void 0;
        if (init_1.initState.fin) {
            try {
                const successRes = yield finCb(init_1.initState.fin);
                if (libReduxDispatch) {
                    libReduxDispatch(successRes);
                }
                else if (init_1.initState.store) {
                    init_1.initState.store.dispatch(successRes);
                }
                return successRes;
            }
            catch (error) {
                if (init_1.initState.store) {
                    const rejectAction = resActionCreator({
                        name: 'Error',
                        error,
                    });
                    if (libReduxDispatch) {
                        libReduxDispatch(action);
                    }
                    else if (init_1.initState.store) {
                        init_1.initState.store.dispatch(rejectAction);
                    }
                }
                ;
                throw error;
            }
        }
        else {
            if (init_1.initState.store) {
                const rejectAction = resActionCreator({
                    name: 'Error',
                    error: new Error(GlobalTypes_1.FIN_NOT_INJECTED_MSG),
                });
                init_1.initState.store.dispatch(rejectAction);
                throw rejectAction.error;
            }
            else {
                throw GlobalTypes_1.FIN_NOT_INJECTED_MSG;
            }
        }
    });
}
exports.default = wrapAsyncFun;
