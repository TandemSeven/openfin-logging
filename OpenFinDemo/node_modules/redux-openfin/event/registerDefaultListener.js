"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const handlerActionCreator_1 = require("../window/actions/handlerActionCreator");
const asyncForEach_1 = require("../utils/asyncForEach");
function registerDefaultListener(fin, store) {
    const finApplication = fin.Application.getCurrentSync();
    const finWindow = fin.Window.getCurrentSync();
    const { dispatch } = store;
    function _dispatch_getStateRes(event) {
        if (event && event.type) {
            if (event.type == 'maximized') {
                dispatch(handlerActionCreator_1.getStateRes({ state: 'maximized' }));
            }
            else if (event.type == 'minimized') {
                dispatch(handlerActionCreator_1.getStateRes({ state: 'minimized' }));
            }
            else if (event.type == 'restored') {
                dispatch(handlerActionCreator_1.getStateRes({ state: 'normal' }));
            }
        }
    }
    asyncForEach_1.default(constants_1.appEvents, (oneEvent) => __awaiter(this, void 0, void 0, function* () {
        yield finApplication.addListener(oneEvent.name, (event) => {
            dispatch(oneEvent.actionCreator(event));
        });
    }));
    asyncForEach_1.default(constants_1.windowEvents, (oneEvent) => __awaiter(this, void 0, void 0, function* () {
        const theName = oneEvent.name;
        if (theName == 'maximized' ||
            theName == 'minimized' ||
            theName == 'restored') {
            yield finWindow.addListener(theName, (event) => {
                _dispatch_getStateRes(event);
                dispatch(oneEvent.actionCreator(event));
            });
        }
        else {
            yield finWindow.addListener(theName, (event) => {
                dispatch(oneEvent.actionCreator(event));
            });
        }
    }));
}
exports.default = registerDefaultListener;
