"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlerActions = require("./actions/handlerActionCreator");
const init_1 = require("../init");
const createAsyncFun_1 = require("../utils/createAsyncFun");
const uuid_1 = require("../utils/uuid");
const types_1 = require("./types");
//http://cdn.openfin.co/jsdocs/beta/fin.desktop.Notification.html#Notification
function createNotification(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = action.payload;
        let userId = action.payload.userId;
        if (!userId) {
            userId = uuid_1.default();
        }
        let finOptions = Object.assign({}, options);
        delete finOptions.userId;
        if (init_1.initState.store) {
            const dispatch = init_1.initState.store.dispatch;
            finOptions.onClick = () => {
                dispatch(handlerActions.notificationOnClickRes({ userId }));
            };
            finOptions.onClose = () => {
                dispatch(handlerActions.notificationOnCloseRes({ userId }));
            };
            finOptions.onDismiss = () => {
                dispatch(handlerActions.notificationOnDismissRes({ userId }));
            };
            finOptions.onError = (reason, errorObj) => {
                dispatch(handlerActions.notificationOnErrorRes({ userId, reason, errorObj }));
            };
            finOptions.onMessage = (message) => {
                dispatch(handlerActions.notificationOnMsgRes({ userId, message }));
            };
            finOptions.onShow = (successObj) => {
                dispatch(handlerActions.notificationOnShowRes({ userId, successObj }));
            };
        }
        return createAsyncFun_1.default(action, types_1.CREATE_NOTIFICATION_ERROR_MSG, handlerActions.createNotificationRes, (fin, action, resActionCreator, succCb, errCb) => {
            let notification = new fin.desktop.Notification(finOptions, () => {
                const responseAction = resActionCreator({
                    userId,
                    notification
                });
                succCb(responseAction);
            }, errCb);
        });
    });
}
exports.createNotification = createNotification;
//http://cdn.openfin.co/jsdocs/beta/fin.desktop.Notification.html#.getCurrent
function getCurrent(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return createAsyncFun_1.default(action, types_1.NOTIFICATION_GET_CURRENT_ERROR_MSG, handlerActions.getCurrentRes, (fin, action, resActionCreator, succCb, errCb) => {
            const notification = fin.desktop.Notification.getCurrent();
            const responseAction = resActionCreator({ notification });
            succCb(responseAction);
        });
    });
}
exports.getCurrent = getCurrent;
//http://cdn.openfin.co/jsdocs/beta/fin.desktop.Notification.html#close
function close(action) {
    return __awaiter(this, void 0, void 0, function* () {
        return createAsyncFun_1.default(action, types_1.NOTIFICATION_CLOSE_ERROR_MSG, handlerActions.closeRes, (fin, action, resActionCreator, succCb, errCb) => {
            const notification = fin.desktop.Notification.getCurrent();
            const responseAction = resActionCreator({});
            notification.close(() => {
                succCb(responseAction);
            });
        });
    });
}
exports.close = close;
//http://cdn.openfin.co/jsdocs/beta/fin.desktop.Notification.html#sendMessage
function sendMessage(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { payload: { message } } = action;
        return createAsyncFun_1.default(action, types_1.NOTIFICATION_SEND_MSG_ERROR_MSG, handlerActions.sendMessageRes, (fin, action, resActionCreator, succCb, errCb) => {
            const notification = fin.desktop.Notification.getCurrent();
            const responseAction = resActionCreator({});
            notification.sendMessage(message, () => {
                succCb(responseAction);
            });
        });
    });
}
exports.sendMessage = sendMessage;
//http://cdn.openfin.co/jsdocs/beta/fin.desktop.Notification.html#sendMessageToApplication
function sendMessageToApplication(action) {
    return __awaiter(this, void 0, void 0, function* () {
        const { payload: { message } } = action;
        return createAsyncFun_1.default(action, types_1.NOTIFICATION_SEND_MSG_TO_APP_ERROR_MSG, handlerActions.sendMessageToApplicationRes, (fin, action, resActionCreator, succCb, errCb) => {
            const notification = fin.desktop.Notification.getCurrent();
            const responseAction = resActionCreator({});
            notification.sendMessageToApplication(message, () => {
                succCb(responseAction);
            });
        });
    });
}
exports.sendMessageToApplication = sendMessageToApplication;
